import urllib.request as req
from urllib.request import urlopen
from konlpy.tag import Kkma
from konlpy.tag import Komoran
from konlpy.tag import Hannanum
from konlpy.tag import Okt
from bs4 import BeautifulSoup
import re
import pandas as pd
import numpy as np
from pandas import Series, DataFrame
from urllib.parse import quote # 아스키 문자로 변환해주는 함수
import requests
from urllib.request import HTTPError
from urllib.parse import quote

quote('의료기관')

Kkma = Kkma()
Komoran = Komoran()
Hannanum = Hannanum()
Okt = Okt()

#==================================================================================
# 2019년 2월 의료기관

url = 'https://news.joins.com/Search/News?StartSearchDate=2019.02.01&EndSearchDate=2019.02.27&Keyword=%EC%9D%98%EB%A3%8C%EA%B8%B0%EA%B4%80&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 의료기관 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



medi201902_medi = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        medi201902_medi.append(line)

# 201902 의료기관
medi201902_medi 

############ 토큰화 ################
# 2019년 2월 의료기관
medi201902=[]
for i in medi201902_medi:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    medi201902.append(Okt.morphs(x))
print(medi201902) # 2019년 2월 의료기관 기사 수집


#==================================================================================
# 2019년 3월 의료기관

url = 'https://news.joins.com/Search/News?StartSearchDate=2019.03.01&EndSearchDate=2019.03.29&Keyword=%EC%9D%98%EB%A3%8C%EA%B8%B0%EA%B4%80&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 의료기관 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



medi201903_medi = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        medi201903_medi.append(line)

# 201903 의료기관
medi201903_medi 

############ 토큰화 ################
# 2019년 3월 의료기관
medi201903=[]
for i in medi201903_medi:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    medi201903.append(Okt.morphs(x))
print(medi201903) # 2019년 3월 의료기관 기사 수집


#==================================================================================
# 2019년 4월 의료기관

url = 'https://news.joins.com/Search/News?StartSearchDate=2019.04.01&EndSearchDate=2019.04.29&Keyword=%EC%9D%98%EB%A3%8C%EA%B8%B0%EA%B4%80&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 의료기관 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



medi201904_medi = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        medi201904_medi.append(line)

# 201904 의료기관
medi201904_medi 

############ 토큰화 ################
# 2019년 4월 의료기관
medi201904=[]
for i in medi201904_medi:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    medi201904.append(Okt.morphs(x))
print(medi201904) # 2019년 4월 의료기관 기사 수집


#==================================================================================
# 2019년 5월 의료기관

url = 'https://news.joins.com/Search/News?StartSearchDate=2019.05.01&EndSearchDate=2019.05.31&Keyword=%EC%9D%98%EB%A3%8C%EA%B8%B0%EA%B4%80&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 의료기관 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



medi201905_medi = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        medi201905_medi.append(line)

# 201905 의료기관
medi201905_medi 

############ 토큰화 ################
# 2019년 5월 의료기관
medi201905=[]
for i in medi201905_medi:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    medi201905.append(Okt.morphs(x))
print(medi201905) # 2019년 5월 의료기관 기사 수집



#==================================================================================
# 2020년 2월 의료기관

url = 'https://news.joins.com/Search/News?StartSearchDate=2020.02.01&EndSearchDate=2020.02.27&Keyword=%EC%9D%98%EB%A3%8C%EA%B8%B0%EA%B4%80&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 의료기관 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



medi202002_medi = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        medi202002_medi.append(line)

# 202002 의료기관
medi202002_medi 

############ 토큰화 ################
# 2020년 2월 의료기관
medi202002=[]
for i in medi202002_medi:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    medi202002.append(Okt.morphs(x))
print(medi202002) # 2020년 2월 의료기관 기사 수집



#==================================================================================
# 2020년 3월 의료기관

url = 'https://news.joins.com/Search/News?StartSearchDate=2020.03.01&EndSearchDate=2020.03.29&Keyword=%EC%9D%98%EB%A3%8C%EA%B8%B0%EA%B4%80&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 의료기관 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



medi202003_medi = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        medi202003_medi.append(line)

# 202003 의료기관
medi202003_medi 

############ 토큰화 ################
# 2020년 3월 의료기관
medi202003=[]
for i in medi202003_medi:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    medi202003.append(Okt.morphs(x))
print(medi202003) # 2020년 3월 의료기관 기사 수집


#==================================================================================
# 2020년 4월 의료기관

url = 'https://news.joins.com/Search/News?StartSearchDate=2020.04.01&EndSearchDate=2020.04.29&Keyword=%EC%9D%98%EB%A3%8C%EA%B8%B0%EA%B4%80&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 의료기관 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



medi202004_medi = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        medi202004_medi.append(line)

# 202004 의료기관
medi202004_medi 

############ 토큰화 ################
# 2020년 4월 의료기관
medi202004=[]
for i in medi202004_medi:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    medi202004.append(Okt.morphs(x))
print(medi202004) # 2020년 4월 의료기관 기사 수집


#==================================================================================
# 2020년 5월 의료기관

url = 'https://news.joins.com/Search/News?StartSearchDate=2020.05.01&EndSearchDate=2020.05.31&Keyword=%EC%9D%98%EB%A3%8C%EA%B8%B0%EA%B4%80&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 의료기관 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



medi202005_medi = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        medi202005_medi.append(line)

# 202005 의료기관
medi202005_medi 

############ 토큰화 ################
# 2020년 5월 의료기관
medi202005=[]
for i in medi202005_medi:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    medi202005.append(Okt.morphs(x))
print(medi202005) # 2020년 5월 의료기관 기사 수집


url = 'https://news.joins.com/Search/News?StartSearchDate=2019.02.01&EndSearchDate=2019.02.29&Keyword=%EB%AC%B8%ED%99%94%EC%B7%A8%EB%AF%B8&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 문화취미 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



cul201902_cul = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        cul201902_cul.append(line)

# 201902 문화취미
cul201902_cul 

############ 토큰화 ################
# 2019년 2월 문화취미
cul201902=[]
for i in cul201902_cul:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    cul201902.append(Okt.morphs(x))
print(cul201902) # 2019년 2월 문화취미 수집

#===================================

############ 201903 문화취미################

url = 'https://news.joins.com/Search/News?StartSearchDate=2019.03.01&EndSearchDate=2019.03.31&Keyword=%EB%AC%B8%ED%99%94%EC%B7%A8%EB%AF%B8&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 문화취미 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



cul201903_cul = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        cul201903_cul.append(line)

# 201903 문화취미
cul201903_cul 

############ 토큰화 ################
# 2019년 3월 문화취미
cul201903=[]
for i in cul201903_cul:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    cul201903.append(Okt.morphs(x))
print(cul201903) # 2019년 3월 문화취미 수집
#==================================

############ 201904 문화취미################

url = 'https://news.joins.com/Search/News?StartSearchDate=2019.04.01&EndSearchDate=2019.04.30&Keyword=%EB%AC%B8%ED%99%94%EC%B7%A8%EB%AF%B8&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 문화취미 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



cul201904_cul = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        cul201904_cul.append(line)

# 201904 문화취미
cul201904_cul 

############ 토큰화 ################
# 2019년 4월 문화취미
cul201904=[]
for i in cul201904_cul:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    cul201904.append(Okt.morphs(x))
print(cul201904) # 2019년 4월 문화취미 수집



#===================================

############ 201905 문화취미################

url = 'https://news.joins.com/Search/News?StartSearchDate=2019.05.01&EndSearchDate=2019.05.31&Keyword=%EB%AC%B8%ED%99%94%EC%B7%A8%EB%AF%B8&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 문화취미 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



cul201905_cul = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        cul201905_cul.append(line)

# 201905 문화취미
cul201905_cul 

############ 토큰화 ################
# 2019년 5월 문화취미
cul201905=[]
for i in cul201905_cul:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    cul201905.append(Okt.morphs(x))
print(cul201905) # 2019년 5월 문화취미 수집


#==================================================================================
# 2020년 2월 문화취미

url = 'https://news.joins.com/Search/News?StartSearchDate=2020.02.01&EndSearchDate=2020.02.29&Keyword=%EB%AC%B8%ED%99%94%EC%B7%A8%EB%AF%B8&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 문화취미 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



cul202002_cul = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        cul202002_cul.append(line)

# 202002 문화취미
cul202002_cul 

############ 토큰화 ################
# 2020년 2월 문화취미
cul202002=[]
for i in cul202002_cul:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    cul202002.append(Okt.morphs(x))
print(cul202002) # 2020년 2월 문화취미 수집


#=========================================================================
# 2020년 3월 문화취미


url = 'https://news.joins.com/Search/News?StartSearchDate=2020.03.01&EndSearchDate=2020.03.31&Keyword=%EB%AC%B8%ED%99%94%EC%B7%A8%EB%AF%B8&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 문화취미 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



cul202003_cul = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        cul202003_cul.append(line)

# 202003 문화취미
cul202003_cul 

############ 토큰화 ################
# 2020년 3월 문화취미
cul202003=[]
for i in cul202003_cul:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    cul202003.append(Okt.morphs(x))
print(cul202003) # 2020년 3월 문화취미 수집


#=========================================================================
# 2020 4월 문화취미

url = 'https://news.joins.com/Search/News?StartSearchDate=2020.04.01&EndSearchDate=2020.04.30&Keyword=%EB%AC%B8%ED%99%94%EC%B7%A8%EB%AF%B8&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 문화취미 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



cul202004_cul = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        cul202004_cul.append(line)

# 202004 문화취미
cul202004_cul 

############ 토큰화 ################
# 2020년 4월 문화취미
cul202004=[]
for i in cul202004_cul:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    cul202004.append(Okt.morphs(x))
print(cul202004) # 2020년 4월 문화취미 수집


#================================================================
# 2020년 5월 문화취미

url = 'https://news.joins.com/Search/News?StartSearchDate=2020.05.01&EndSearchDate=2020.05.30&Keyword=%EB%AC%B8%ED%99%94%EC%B7%A8%EB%AF%B8&SortType=New&SearchCategoryType=News&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 문화취미 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div#article_body > div').replace_with("").text
            if len(soup.select_one('div#article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



cul202005_cul = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        cul202005_cul.append(line)

# 202005 문화취미
cul202005_cul 

############ 토큰화 ################
# 2020년 5월 문화취미
cul202005=[]
for i in cul202005_cul:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    cul202005.append(Okt.morphs(x))
print(cul202005) # 2020년 5월 문화취미 수집


#health===============================================================================

## 2019년 1월 
file = open("C:/data/health201901.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
health201901=[]
for i in data:
    health201901.append(Okt.morphs(i))
print(health201901)


## 2019년 2월
file=open("C:/data/health201902.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
health201902=[]
for i in data:
    health201902.append(Okt.morphs(i))
print(health201902)


## 2019년 3월 
file=open("C:/data/health201903.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
health201903=[]
for i in data:
    health201903.append(Okt.morphs(i))
print(health201903)


## 2019년 4월 
file=open("C:/data/health201904.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
health201904=[]
for i in data:
    health201904.append(Okt.morphs(i))
print(health201904)


## 2019년 5월 
file=open("C:/data/health201905.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
health201905=[]
for i in data:
    health201905.append(Okt.morphs(i))
print(health201905)


## 2020년 1월 
file=open("C:/data/health202001.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
health202001=[]
for i in data:
    health202001.append(Okt.morphs(i))
print(health202001)


## 2020년 2월
file=open("C:/data/health202002.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
health202002=[]
for i in data:
    health202002.append(Okt.morphs(i))
print(health202002)


## 2020년 3월 
file=open("C:/data/health202003.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
health202003=[]
for i in data:
    health202003.append(Okt.morphs(i))
print(health202003)


## 2020년 4월 
file=open("C:/data/health202004.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
health202004=[]
for i in data:
    health202004.append(Okt.morphs(i))
print(health202004)


## 2019년 5월 
file=open("C:/data/health202005.txt","r")
data=file.read()
print(data)
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
health202005=[]
for i in data:
    health202005.append(Okt.morphs(i))
print(health202005)

#요식업소===========================================================================
## 2019년 1월 
file=open("C:/data/food201901.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
food201901=[]
for i in data:
    food201901.append(Okt.morphs(i))
print(food201901)


## 2019년 2월
# R에서 만든 파일 리스트로 읽기
file=open("C:/data/food201902.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
food201902=[]
for i in data:
    food201902.append(Okt.morphs(i))
print(food201902)


## 2019년 3월 
file=open("C:/data/food201903.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
food201903=[]
for i in data:
    food201903.append(Okt.morphs(i))
print(food201903)


## 2019년 4월 
file=open("C:/data/food201904.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
food201904=[]
for i in data:
    food201904.append(Okt.morphs(i))
print(food201904)


## 2019년 5월 
file=open("C:/data/food201905.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
food201905=[]
for i in data:
    food201905.append(Okt.morphs(i))
print(food201905)


## 2020년 1월 
file=open("C:/data/food202001.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
food202001=[]
for i in data:
    food202001.append(Okt.morphs(i))
print(food202001)


## 2020년 2월
file=open("C:/data/food202002.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
food202002=[]
for i in data:
    food202002.append(Okt.morphs(i))
print(food202002)


## 2020년 3월 
file=open("C:/data/food202003.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
food202003=[]
for i in data:
    food202003.append(Okt.morphs(i))
print(food202003)


## 2020년 4월 
file=open("C:/data/food202004.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
food202004=[]
for i in data:
    food202004.append(Okt.morphs(i))
print(food202004)


## 2019년 5월 
file=open("C:/data/food202005.txt","r")
data=file.read()
data=data.replace('\n',' ')
data=data.replace('\t',' ')
data=data.replace('<U+00A0>',' ')
data=data.split('.')
file.close()
# 토큰화
food202005=[]
for i in data:
    food202005.append(Okt.morphs(i))
print(food202005)

#================================================================

############ 201902 레저################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2019.02.01&EndSearchDate=2019.02.28&Keyword=%EB%A0%88%EC%A0%80&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 레저 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



lines201902_leisure = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines201902_leisure.append(line)

# 201902 레저
lines201902_leisure 

############ 토큰화 ################
# 2019년 2월 레저
leisure201902=[]
for i in lines201902_leisure:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    leisure201902.append(Okt.morphs(x))
print(leisure201902)

#===================================

############ 201903 레저################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2019.03.01&EndSearchDate=2019.03.31&Keyword=%EB%A0%88%EC%A0%80&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 레저 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts




lines201903_leisure = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines201903_leisure.append(line)

# 201903 레저
lines201903_leisure 

############ 토큰화 ################
# 2019년 3월 레저
leisure201903=[]
for i in lines201903_leisure:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    leisure201903.append(Okt.morphs(x))
print(leisure201903)

#=======================================

############ 201904 레저################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2019.04.01&EndSearchDate=2019.04.30&Keyword=%EB%A0%88%EC%A0%80&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 레저 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



lines201904_leisure = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines201904_leisure.append(line)

# 201904 레저
lines201904_leisure 

############ 토큰화 ################
# 2019년 4월 레저
leisure201904=[]
for i in lines201904_leisure:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    leisure201904.append(Okt.morphs(x))
print(leisure201904)

#====================================

############ 201905 레저################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2019.05.01&EndSearchDate=2019.05.31&Keyword=%EB%A0%88%EC%A0%80&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 레저 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



lines201905_leisure = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines201905_leisure.append(line)

# 201905 레저
lines201905_leisure

############ 토큰화 ################
# 2019년 5월 레저
leisure201905=[]
for i in lines201905_leisure:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    leisure201905.append(Okt.morphs(x))
print(leisure201905)



############ 202002 레저################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2020.02.01&EndSearchDate=2020.02.28&Keyword=%EB%A0%88%EC%A0%80&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 레저 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



lines202002_leisure = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines202002_leisure.append(line)

# 202002 레저
lines202002_leisure 

############ 토큰화 ################
# 2020년 2월 레저
leisure202002=[]
for i in lines202002_leisure:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    leisure202002.append(Okt.morphs(x))
print(leisure202002)

#========================================

############ 202003 레저################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2020.03.01&EndSearchDate=2020.03.31&Keyword=%EB%A0%88%EC%A0%80&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 레저 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



lines202003_leisure = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines202003_leisure.append(line)

# 202003 레저
lines202003_leisure 

############ 토큰화 ################
# 2020년 3월 레저
leisure202003=[]
for i in lines202003_leisure:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    leisure202003.append(Okt.morphs(x))
print(leisure202003)

#===============================================

############ 202004 레저################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2020.04.01&EndSearchDate=2020.04.30&Keyword=%EB%A0%88%EC%A0%80&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 레저 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts




lines202004_leisure = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines202004_leisure.append(line)

# 202004 레저
lines202004_leisure 

############ 토큰화 ################
# 2020년 4월 레저
leisure202004=[]
for i in lines202004_leisure:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    leisure202004.append(Okt.morphs(x))
print(leisure202004)

#=================================

############ 202005 레저################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2020.05.01&EndSearchDate=2020.05.31&Keyword=%EB%A0%88%EC%A0%80&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 레저 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



lines202005_leisure = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines202005_leisure.append(line)

# 202005 레저
lines202005_leisure 

############ 토큰화 ################
# 2020년 5월 레저
leisure202005=[]
for i in lines202005_leisure:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    leisure202005.append(Okt.morphs(x))
print(leisure202005)

############ 201902 숙박################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2019.02.01&EndSearchDate=2019.02.28&Keyword=%EC%88%99%EB%B0%95&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 숙박 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts




lines201902_s = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines201902_s.append(line)


# 201902 숙박 
lines201902_s 


#################토큰화####################
# 2019년 2월 숙박
stay201902=[]
for i in lines201902_s:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    
    stay201902.append(Okt.morphs(x))
print(stay201902)



#===============================================

############ 201903 숙박################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2019.03.01&EndSearchDate=2019.03.30&Keyword=%EC%88%99%EB%B0%95&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 숙박 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



lines201903_s = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines201903_s.append(line)

    
# 201903 숙박
lines201903_s 


#################토큰화####################
# 2019년 3월 숙박
stay201903=[]
for i in lines201903_s:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    
    stay201903.append(Okt.morphs(x))
print(stay201903)



#=========================================

############ 201904 숙박################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2019.04.01&EndSearchDate=2019.04.30&Keyword=%EC%88%99%EB%B0%95&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 숙박 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



lines201904_s = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines201904_s.append(line)

# 201904 숙박
lines201904_s 


#################토큰화####################
# 2019년 4월 숙박
stay201904=[]
for i in lines201904_s:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    
    stay201904.append(Okt.morphs(x))
print(stay201904)



#==================================================================

############ 201905 숙박################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2019.05.01&EndSearchDate=2019.05.31&Keyword=%EC%88%99%EB%B0%95&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 숙박 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



lines201905_s = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines201905_s.append(line)

# 201905 숙박
lines201905_s

#################토큰화####################
# 2019년 5월 숙박
stay201905=[]
for i in lines201905_s:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    
    stay201905.append(Okt.morphs(x))
print(stay201905)


############ 202002 숙박################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2020.02.01&EndSearchDate=2020.02.29&Keyword=%EC%88%99%EB%B0%95&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 숙박 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts




lines202002_s = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines202002_s.append(line)

# 202002 숙박
lines202002_s 

############ 토큰화 ################
# 2020년 2월 숙박
stay202002=[]
for i in lines202002_s:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    
    stay202002.append(Okt.morphs(x))
print(stay202002)



##=====================================================

############ 202003 숙박################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2020.03.01&EndSearchDate=2020.03.23&Keyword=%EC%88%99%EB%B0%95&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 숙박 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



lines202003_s = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines202003_s.append(line)

# 202003 숙박
lines202003_s 

############ 토큰화 ################
# 2020년 3월 숙박
stay202003=[]
for i in lines202003_s:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    
    stay202003.append(Okt.morphs(x))
print(stay202003)

#==================================

############ 202004 숙박################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2020.04.01&EndSearchDate=2020.04.30&Keyword=%EC%88%99%EB%B0%95&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 숙박 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



lines202004_s = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines202004_s.append(line)

# 202004 숙박
lines202004_s 

############ 토큰화 ################
# 2020년 4월 숙박
stay202004=[]
for i in lines202004_s:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    
    stay202004.append(Okt.morphs(x))
print(stay202004)

#===============================================

############ 202005 숙박################

url = 'https://news.joins.com/Search/JoongangNews?StartSearchDate=2020.05.01&EndSearchDate=2020.05.31&Keyword=%EC%88%99%EB%B0%95&SortType=New&SearchCategoryType=JoongangNews&PeriodType=DirectInput&ScopeType=All&ServiceCode=&SourceGroupType=&ReporterCode=&ImageType=All&JplusType=All&BlogType=All&ImageSearchType=Image&MatchKeyword=&IncludeKeyword=&ExcluedeKeyword='
html = urlopen(url)
soup = BeautifulSoup(html, 'html.parser')
soup

    
# 숙박 url
urls = []
for i in soup.select('h2.headline > a'):
    urls.append(i['href'])

urls



texts = []
for i in urls:
    url = i
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    try:
        while True:
            soup.select_one('div.article_body > div').replace_with("").text
            if len(soup.select_one('div.article_body > div').replace_with("").text) == 0:
                break
    except Exception as err:
        print(err)
        pass
    data = soup.select_one('div.article_body').text.strip()
    texts.append(data)

texts



lines202005_s = []

for i in range(len(texts)) :
    article = texts[i]
    
    sentences = article.split(". ")
    
    for setence_idx in range(len(sentences) -1) :
        line = sentences[setence_idx].strip().replace(u'\xa0', u' ')
        lines202005_s.append(line)

# 202005 숙박
lines202005_s 

############ 토큰화 ################'
# 2020년 5월 숙박
stay202005=[]
for i in lines202005_s:
    x = i.replace(',', ' ')
    x = x.replace('(', ' ')
    x = x.replace(')', ' ')
    x = x.replace('”', ' ')
    x = x.replace('“', ' ')
    x = x.replace('.', ' ')
    x = x.replace('\'', ' ')
    x = x.replace('▶', ' ')
    x = x.replace('·', ' ')
    x = x.replace('·', ' ')
    x = x.replace('‘', ' ')
    x = x.replace('’', ' ')
    x = x.replace('"', ' ')
    x = x.replace('?', ' ')
    
    
    stay202005.append(Okt.morphs(x))
print(stay202005)




#library
from gensim.models import Word2Vec
from sklearn.decomposition import PCA
import pandas as pd
from pandas import *
import numpy as np




'''
#variable // 'positive'열은 제 주관적인 견해이며 수정하셔도 됩니다.
health_2020_01 ~ health_2020_05
health_2019_01 ~ health_2019_05
food_2020_01 ~ food_2020_05
food_2019_01 ~ food_2019_05
cul_2020_02 ~ cul_2020_05
cul_2019_02 ~ cul_2019_05
medi_2020_02 ~ medi_2020_05
medi_2019_02 ~ medi_2019_05
leisure_2020_02 ~ leisure_2020_05
leisure_2019_02 ~ leisure_2019_05
stay_2020_02 ~ stay_2020_05
stay_2019_02 ~ stay_2019_05
'''
#class word
class word():
    def __init__(self):
        self.word=[]
    def input_word(self,arg):
        self.arg=arg
        self.word.append(self.arg)
        return self.word

if __name__=="__main__":
    test=word()
    test1 = test.input_word("가")
    test1 = test.input_word("나")
    test1 = test.input_word("다")
    print(test1)
'''
#health 2020
result: health_2020_01  ~  health_2020_05
'''
#from health202001
embedding_mode= Word2Vec(health202001, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
#유사도
print(embedding_mode.wv.most_similar(positive=['건강'],topn=100))
#건강 : (+) 회복하고/챙기는/챙겨서/지키고/좋다 (-)열악하고/ 노약/ 열악한

health=word()
health_20_01=health.input_word("회복하고")
health_20_01=health.input_word("챙기는")
health_20_01=health.input_word("챙겨서")
health_20_01=health.input_word("지키고")
health_20_01=health.input_word("좋다")
health_20_01=health.input_word("열악하고")
health_20_01=health.input_word("노약")
health_20_01=health.input_word("열악한")

health_2020_01=pd.DataFrame({'keyword':['건강' for i in range(0,len(health_20_01))],'target':health_20_01,
              'vector':[float(embedding_mode.wv.similarity(w1='건강',w2=i)) for i in health_20_01]})

health_2020_01['postivie']=['+','+','+','+','+','-','-','-']
print(health_2020_01)

#from health202002
embedding_mode= Word2Vec(health202002, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
#유사도
print(embedding_mode.wv.most_similar(positive=['건강'],topn=100))
#건강 : 위협(-) /중대한(-)/ 헛걸음(-)/ 당혹스럽긴(-) / 범죄 (-) / 성급히(-) / 지키기 (+)

health=word()
health_20_02=health.input_word("위협")
health_20_02=health.input_word("중대한")
health_20_02=health.input_word("헛걸음")
health_20_02=health.input_word("당혹스럽긴")
health_20_02=health.input_word("범죄")
health_20_02=health.input_word("성급히")
health_20_02=health.input_word("지키기")


health_2020_02=pd.DataFrame({'keyword':['건강' for i in range(0,len(health_20_02))],'target':health_20_02,
              'vector':[float(embedding_mode.wv.similarity(w1='건강',w2=i)) for i in health_20_02]})

health_2020_02['postivie']=['-','-','-','-','-','-','+']
print(health_2020_02)

#from health202003
embedding_mode= Word2Vec(health202003, size=100,window=2,
                         min_count=1, workers=4, iter=50,
                         sg=1)
#유사도
print(embedding_mode.wv.most_similar(positive=['건강'],topn=100))
#염려(-)/ 회복(+)/ 위생(중립)/공중(중립)/ 밀봉(중립) /공중보건(중립) /분쟁(-)
#(주석참고) 염려(-)/ 회복(+)/ 위생(-)/공중(-)/ 밀봉(-) /공중보건(-) /분쟁(-)
health=word()
health_20_03=health.input_word("염려")
health_20_03=health.input_word("회복")
health_20_03=health.input_word("위생")
health_20_03=health.input_word("공중")
health_20_03=health.input_word("밀봉")
health_20_03=health.input_word("공중보건")
health_20_03=health.input_word("분쟁")
health_2020_03=pd.DataFrame({'keyword':['건강' for i in range(0,len(health_20_03))],'target':health_20_03,
              'vector':[float(embedding_mode.wv.similarity(w1='건강',w2=i)) for i in health_20_03]})
health_2020_03['postivie']=['-','+','-','-','-','-','-']
print(health_2020_03)
'''
# 중립단어 : 위생, 공중, 밀봉, 공중보건
print(embedding_mode.wv.most_similar(positive=['위생'],topn=100)) # 책임지는(-), 염려(-), 회복(+)
print(embedding_mode.wv.most_similar(positive=['공중'],topn=100)) # 책임지는(-), 위생(중립)
print(embedding_mode.wv.most_similar(positive=['밀봉'],topn=100)) # 속였다(-), 구속(-), KF(-), 염려(-)
print(embedding_mode.wv.most_similar(positive=['공중보건'],topn=100)) #책임지는 (-), 통제(-)
#result : 중립단어 모두 -
'''

#from health202004
embedding_mode= Word2Vec(health202004, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['건강'],topn=100))
# 생명(+)/ 걱정(-)/ 스테이(-) / 과로(-) / 불편(-) / 힘들(-) / 줄일(-) / 대가(-) / 호소(-)
health=word()
health_20_04=health.input_word("생명")
health_20_04=health.input_word("걱정")
health_20_04=health.input_word("스테이")
health_20_04=health.input_word("과로")
health_20_04=health.input_word("불편")
health_20_04=health.input_word("힘들")
health_20_04=health.input_word("줄일")
health_20_04=health.input_word("대가")
health_20_04=health.input_word("호소")
health_2020_04=pd.DataFrame({'keyword':['건강' for i in range(0,len(health_20_04))],'target':health_20_04,
              'vector':[float(embedding_mode.wv.similarity(w1='건강',w2=i)) for i in health_20_04]})

health_2020_04['postivie']=['+','-','-','-','-','-','-','-','-']
print(health_2020_04)

#from health202005
embedding_mode= Word2Vec(health202005, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['건강'],topn=100))
#생명(+)/ 신선(+)/ 염려(-)/ 과로(-) /무리한(-)
health=word()
health_20_05=health.input_word("생명")
health_20_05=health.input_word("신선")
health_20_05=health.input_word("염려")
health_20_05=health.input_word("과로")
health_20_05=health.input_word("무리한")
health_2020_05=pd.DataFrame({'keyword':['건강' for i in range(0,len(health_20_05))],'target':health_20_05,
              'vector':[float(embedding_mode.wv.similarity(w1='건강',w2=i)) for i in health_20_05]})
health_2020_05['postivie']=['+','+','-','-','-']
print(health_2020_05)

'''
#health 2019
result: health_2019_01  ~  health_2019_05
'''
#from health201901
embedding_mode= Word2Vec(health201901, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['건강'],topn=100))
#치명(-)/ 과도(-)/ 간접흡연(-)/ 발달(+)/ 해로움(-)
health=word()
health_19_01=health.input_word("치명")
health_19_01=health.input_word("과도")
health_19_01=health.input_word("간접흡연")
health_19_01=health.input_word("발달")
health_19_01=health.input_word("해로움")

health_2019_01=pd.DataFrame({'keyword':['건강' for i in range(0,len(health_19_01))],'target':health_19_01,
              'vector':[float(embedding_mode.wv.similarity(w1='건강',w2=i)) for i in health_19_01]})
health_2019_01['postivie']=['-','-','-','+','-']
print(health_2019_01)

#from health201902
embedding_mode= Word2Vec(health201902, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['건강'],topn=100))
#조심해야(-)/위협(-)/즐기는(+)/주의(-)/해외여행(+)/다행히(+)/성실하게(+)
health=word()
health_19_02=health.input_word("조심해야")
health_19_02=health.input_word("위협")
health_19_02=health.input_word("즐기는")
health_19_02=health.input_word("주의")
health_19_02=health.input_word("해외여행")
health_19_02=health.input_word("다행히")
health_19_02=health.input_word("성실하게")

health_2019_02=pd.DataFrame({'keyword':['건강' for i in range(0,len(health_19_02))],'target':health_19_02,
              'vector':[float(embedding_mode.wv.similarity(w1='건강',w2=i)) for i in health_19_02]})
health_2019_02['postivie']=['-','-','+','-','+','+','+']
print(health_2019_02)

#from health201903
embedding_mode= Word2Vec(health201903, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['건강'],topn=100))
#안전한지(-)/비싸지만(-)/힘들어져(-)/격차(-)/해롭다(-)/지킬(+)/Healthiest(+)
health=word()
health_19_03=health.input_word("안전한지")
health_19_03=health.input_word("비싸지만")
health_19_03=health.input_word("힘들어져")
health_19_03=health.input_word("격차")
health_19_03=health.input_word("해롭다")
health_19_03=health.input_word("지킬")
health_19_03=health.input_word("Healthiest")

health_2019_03=pd.DataFrame({'keyword':['건강' for i in range(0,len(health_19_03))],'target':health_19_03,
              'vector':[float(embedding_mode.wv.similarity(w1='건강',w2=i)) for i in health_19_03]})
health_2019_03['postivie']=['-','-','-','-','-','+','+']
print(health_2019_03)

#from health201904
embedding_mode= Word2Vec(health201904, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['건강'],topn=100))
#호흡기(-)/위협(-)/생명(+)/과로(-)/침투(-)/좋다(+)
health=word()
health_19_04=health.input_word("호흡기")
health_19_04=health.input_word("위협")
health_19_04=health.input_word("생명")
health_19_04=health.input_word("과로")
health_19_04=health.input_word("침투")
health_19_04=health.input_word("좋다")
health_2019_04=pd.DataFrame({'keyword':['건강' for i in range(0,len(health_19_04))],'target':health_19_04,
              'vector':[float(embedding_mode.wv.similarity(w1='건강',w2=i)) for i in health_19_04]})
health_2019_04['postivie']=['-','-','+','-','-','+']
print(health_2019_04)

#from health201905
embedding_mode= Word2Vec(health201905, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['건강'],topn=100))
#지켜(+)/복지(+)/웰빙(+)/위협(-)/좋지(+)/진흥(+)/따뜻한(+)/깨끗한(+)
health=word()
health_19_05=health.input_word("지켜")
health_19_05=health.input_word("복지")
health_19_05=health.input_word("웰빙")
health_19_05=health.input_word("위협")
health_19_05=health.input_word("좋지")
health_19_05=health.input_word("진흥")
health_19_05=health.input_word("따뜻한")
health_19_05=health.input_word("깨끗한")

health_2019_05=pd.DataFrame({'keyword':['건강' for i in range(0,len(health_19_05))],'target':health_19_05,
              'vector':[float(embedding_mode.wv.similarity(w1='건강',w2=i)) for i in health_19_05]})
health_2019_05['postivie']=['+','+','+','-','+','+','+','+']
print(health_2019_05)

'''
#food 2020
result: food_2020_01  ~  food_2020_05
'''
#from food202001
embedding_mode= Word2Vec(food202001, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['음식'],topn=100))
#술잔(+)/천국(+)/높고(+)/오를(-)
print(embedding_mode.wv.most_similar(positive=['맥주'],topn=100))
#신선한(+)/선보이는(+)/신선함을(+)/푸른색(+)

food=word()
food_20_01=food.input_word("술잔")
food_20_01=food.input_word("천국")
food_20_01=food.input_word("높고")
food_20_01=food.input_word("오를")
food_2020_01=pd.DataFrame({'keyword':['음식' for i in range(0,len(food_20_01))],'target':food_20_01,
              'vector':[float(embedding_mode.wv.similarity(w1='음식',w2=i)) for i in food_20_01]})
food=word()
food_20_01_1=food.input_word("신선한")
food_20_01_1=food.input_word("선보이는")
food_20_01_1=food.input_word("신선함을")
food_20_01_1=food.input_word("푸른색")
food_2020_01=food_2020_01.append(pd.DataFrame({'keyword':['맥주' for i in range(0,len(food_20_01_1))],'target':food_20_01_1,
              'vector':[float(embedding_mode.wv.similarity(w1='맥주',w2=i)) for i in food_20_01_1]}))
food_2020_01=food_2020_01.reset_index(drop=True)
food_2020_01['positive']=['+','+','+','-','+','+','+','+']
print(food_2020_01)

#from food202002
embedding_mode= Word2Vec(food202002, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['음식'],topn=100))
#까다로운(-)/좋다(+)/소형(-)/궁합(+)/정해진(-)/외부(-)/살아남은(+)/배달(-)/지킨(+)/성공한(+)
food=word()
food_20_02=food.input_word("까다로운")
food_20_02=food.input_word("좋다")
food_20_02=food.input_word("소형")
food_20_02=food.input_word("궁합")
food_20_02=food.input_word("정해진")
food_20_02=food.input_word("외부")
food_20_02=food.input_word("살아남은")
food_20_02=food.input_word("배달")
food_20_02=food.input_word("지킨")
food_20_02=food.input_word("성공한")
food_2020_02=pd.DataFrame({'keyword':['음식' for i in range(0,len(food_20_02))],'target':food_20_02,
              'vector':[float(embedding_mode.wv.similarity(w1='음식',w2=i)) for i in food_20_02]})
food_2020_02['positive']=['-','+','-','+','-','-','+','-','+','+']
print(food_2020_02)

#from food202003
embedding_mode= Word2Vec(food202003, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['음식'],topn=100))
#빠른(+)/잃었고(-)/닫은(-)/배달(-)/관광(중립)/대유행(중립)/불확실하다(-)
#빠른(+)/잃었고(-)/닫은(-)/배달(-)/관광(-)/대유행(-)/불확실하다(-)
'''
#중립단어 : 관광, 대유행
print(embedding_mode.wv.most_similar(positive=['관광'],topn=100)) #마비(-)/떠나(-)/열악한(-)
print(embedding_mode.wv.most_similar(positive=['대유행'],topn=100)) #잃었고(-)/억제(-)/압도(-)
'''
food=word()
food_20_03=food.input_word("빠른")
food_20_03=food.input_word("잃었고")
food_20_03=food.input_word("닫은")
food_20_03=food.input_word("배달")
food_20_03=food.input_word("관광")
food_20_03=food.input_word("대유행")
food_20_03=food.input_word("불확실하다")
food_2020_03=pd.DataFrame({'keyword':['음식' for i in range(0,len(food_20_03))],'target':food_20_03,
              'vector':[float(embedding_mode.wv.similarity(w1='음식',w2=i)) for i in food_20_03]})
food_2020_03['positive']=['+','-','-','-','-','-','-']

print(food_2020_03)

#from food202004
embedding_mode= Word2Vec(food202004, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['음식'],topn=100))
#기름진(-)/피하(-)/맛있어야(+)/맛집(+)
print(embedding_mode.wv.most_similar(positive=['배달'],topn=100))
#급증(+)/많습니다(+)/않습니다(-)/폴리프로필렌(-)/포장(-)

food=word()
food_20_04=food.input_word("기름진")
food_20_04=food.input_word("피하")
food_20_04=food.input_word("맛있어야")
food_20_04=food.input_word("맛집")
food_2020_04=pd.DataFrame({'keyword':['음식' for i in range(0,len(food_20_04))],'target':food_20_04,
              'vector':[float(embedding_mode.wv.similarity(w1='음식',w2=i)) for i in food_20_04]})
food=word()
food_20_04_1=food.input_word("급증")
food_20_04_1=food.input_word("많습니다")
food_20_04_1=food.input_word("않습니다")
food_20_04_1=food.input_word("폴리프로필렌")
food_20_04_1=food.input_word("포장")

food_2020_04=food_2020_04.append(pd.DataFrame({'keyword':['배달' for i in range(0,len(food_20_04_1))],'target':food_20_04_1,
              'vector':[float(embedding_mode.wv.similarity(w1='음식',w2=i)) for i in food_20_04_1]}))
food_2020_04=food_2020_04.reset_index(drop=True)
food_2020_04['positive']=['-','-','+','+','+','+','-','-','-']
print(food_2020_04)

#from food202005
embedding_mode= Word2Vec(food202005, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['음식'],topn=100))
#비해(-)/신선한(+)/Personal(-)/장벽(-)/즐기기(+)/일상생활(+)
food=word()
food_20_05=food.input_word("비해")
food_20_05=food.input_word("신선한")
food_20_05=food.input_word("Personal")
food_20_05=food.input_word("장벽")
food_20_05=food.input_word("즐기기")
food_20_05=food.input_word("일상생활")
food_2020_05=pd.DataFrame({'keyword':['음식' for i in range(0,len(food_20_05))],'target':food_20_05,
              'vector':[float(embedding_mode.wv.similarity(w1='음식',w2=i)) for i in food_20_05]})
food_2020_05['positive']=['-','+','-','-','+','+']

'''
#food 2019
result: food_2019_01  ~  food_2019_05
'''
#from food201901
embedding_mode= Word2Vec(food201901, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['음식'],topn=100))
#간편하면서도(+)/눈치(-)/애정(+)/욕심(-)/성난(-)/맛있고(+)/쉽고(+)/좋은(+)
food=word()
food_19_01=food.input_word("간편하면서도")
food_19_01=food.input_word("눈치")
food_19_01=food.input_word("애정")
food_19_01=food.input_word("욕심")
food_19_01=food.input_word("성난")
food_19_01=food.input_word("맛있고")
food_19_01=food.input_word("쉽고")
food_19_01=food.input_word("좋은")
food_2019_01=pd.DataFrame({'keyword':['음식' for i in range(0,len(food_19_01))],'target':food_19_01,
              'vector':[float(embedding_mode.wv.similarity(w1='음식',w2=i)) for i in food_19_01]})
food_2019_01['positive']=['+','-','+','-','-','+','+','+']
print(food_2019_01)

#from food201902
embedding_mode= Word2Vec(food201902, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['음식'],topn=100))
# 기회(+)/배려하되(+)/전세계(+)/편하게(+)/깔끔한(+)/좋고(+)
food=word()
food_19_02=food.input_word("기회")
food_19_02=food.input_word("배려하되")
food_19_02=food.input_word("전세계")
food_19_02=food.input_word("편하게")
food_19_02=food.input_word("깔끔한")
food_19_02=food.input_word("좋고")
food_2019_02=pd.DataFrame({'keyword':['음식' for i in range(0,len(food_19_02))],'target':food_19_02,
              'vector':[float(embedding_mode.wv.similarity(w1='음식',w2=i)) for i in food_19_02]})
food_2019_02['positive']=['+','+','+','+','+','+']
print(food_2019_02)

#from food201903
embedding_mode= Word2Vec(food201903, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['음식'],topn=100))
#재미있고(+)/흥(+)/가볍게(+)/좋아한다면(+)/춤(+)/힐링(+)
food=word()
food_19_03=food.input_word("재미있고")
food_19_03=food.input_word("흥")
food_19_03=food.input_word("가볍게")
food_19_03=food.input_word("좋아한다면")
food_19_03=food.input_word("흥")
food_19_03=food.input_word("힐링")
food_2019_03=pd.DataFrame({'keyword':['음식' for i in range(0,len(food_19_03))],'target':food_19_03,
              'vector':[float(embedding_mode.wv.similarity(w1='음식',w2=i)) for i in food_19_03]})
food_2019_03['positive']=['+','+','+','+','+','+']
print(food_2019_03)

#from food201904
embedding_mode= Word2Vec(food201904, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['음식'],topn=100))
#세련되게(+)/나눠주고(+)/업그레이드(+)/맛있는(+)/특별하게(+)/야무진(+)/밝은(+)
food=word()
food_19_04=food.input_word("세련되게")
food_19_04=food.input_word("나눠주고")
food_19_04=food.input_word("업그레이드")
food_19_04=food.input_word("맛있는")
food_19_04=food.input_word("특별하게")
food_19_04=food.input_word("야무진")
food_19_04=food.input_word("밝은")

food_2019_04=pd.DataFrame({'keyword':['음식' for i in range(0,len(food_19_04))],'target':food_19_04,
              'vector':[float(embedding_mode.wv.similarity(w1='음식',w2=i)) for i in food_19_04]})
food_2019_04['positive']=['+' for i in range(0,7)]

#from food201905
embedding_mode= Word2Vec(food201905, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['음식'],topn=100))
#아니라(-)/레저(+)/않으려(-)/버텨(-)/휴식(+)/가능해지게(+)/거친(-)/제재(-)/맛있을(+)
food=word()
food_19_05=food.input_word("아니라")
food_19_05=food.input_word("레저")
food_19_05=food.input_word("않으려")
food_19_05=food.input_word("버텨")
food_19_05=food.input_word("휴식")
food_19_05=food.input_word("가능해지게")
food_19_05=food.input_word("거친")
food_19_05=food.input_word("제재")
food_19_05=food.input_word("맛있을")
food_2019_05=pd.DataFrame({'keyword':['음식' for i in range(0,len(food_19_05))],'target':food_19_05,
              'vector':[float(embedding_mode.wv.similarity(w1='음식',w2=i)) for i in food_19_05]})
food_2019_05['positive']=['-','+','-','-','+','+','-','-','+']
print(food_2019_05)

'''
#culture 2020
result: cul_2020_02  ~  cul_2020_05
'''
#from cul202002
embedding_mode= Word2Vec(cul202002, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['문화'],topn=100))
#줄어들고(-)/불가능(-)/돌이켜(-)/즐기기(+)/없다고(-)/장점(+)/즐기자(+)
cul=word()
cul_20_02=cul.input_word("줄어들고")
cul_20_02=cul.input_word("불가능")
cul_20_02=cul.input_word("돌이켜")
cul_20_02=cul.input_word("즐기기")
cul_20_02=cul.input_word("없다고")
cul_20_02=cul.input_word("장점")
cul_20_02=cul.input_word("즐기자")

cul_2020_02=pd.DataFrame({'keyword':['문화' for i in range(0,len(cul_20_02))],'target':cul_20_02,
              'vector':[float(embedding_mode.wv.similarity(w1='문화',w2=i)) for i in cul_20_02]})
cul_2020_02['positive']=['-','-','-','+','-','+','+']
print(cul_2020_02)

#from cul202003
embedding_mode= Word2Vec(cul202003, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['문화'],topn=100))
#가능해진(+)/웃는(+)/미비한(-)/활성화(+)/힘들죠(-)
cul=word()
cul_20_03=cul.input_word("가능해진")
cul_20_03=cul.input_word("웃는")
cul_20_03=cul.input_word("미비한")
cul_20_03=cul.input_word("활성화")
cul_20_03=cul.input_word("힘들죠")
cul_2020_03=pd.DataFrame({'keyword':['문화' for i in range(0,len(cul_20_03))],'target':cul_20_03,
              'vector':[float(embedding_mode.wv.similarity(w1='문화',w2=i)) for i in cul_20_03]})
print(embedding_mode.wv.most_similar(positive=['취미'],topn=100))

#그립습니다(-)/편의(+)/소중한(+)/힘든(-)/좋습니다(+)/좋다(+)
cul=word()
cul_20_03_1=cul.input_word("그립습니다")
cul_20_03_1=cul.input_word("편의")
cul_20_03_1=cul.input_word("소중한")
cul_20_03_1=cul.input_word("힘든")
cul_20_03_1=cul.input_word("좋습니다")
cul_20_03_1=cul.input_word("좋다")
cul_2020_03=cul_2020_03.append(pd.DataFrame({'keyword':['취미' for i in range(0,len(cul_20_03_1))],'target':cul_20_03_1,
              'vector':[float(embedding_mode.wv.similarity(w1='취미',w2=i)) for i in cul_20_03_1]}))
cul_2020_03['positive']=['+','+','-','+','-','-','+','+','-','+','+']
cul_2020_03=cul_2020_03.reset_index(drop=True)
print(cul_2020_03)

#from cul202004
embedding_mode= Word2Vec(cul202004, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['문화'],topn=100))
#편의(+)/풍부하다(+)/건전한(+)/다양한(+)/좋다며(+)/우수하다(+)/훈훈함을(+)/편리하게(+)/어렵고(-)
cul=word()
cul_20_04=cul.input_word("편의")
cul_20_04=cul.input_word("풍부하다")
cul_20_04=cul.input_word("건전한")
cul_20_04=cul.input_word("다양한")
cul_20_04=cul.input_word("좋다며")
cul_20_04=cul.input_word("우수하다")
cul_20_04=cul.input_word("훈훈함을")
cul_20_04=cul.input_word("편리하게")
cul_20_04=cul.input_word("어렵고")
cul_2020_04=pd.DataFrame({'keyword':['문화' for i in range(0,len(cul_20_04))],'target':cul_20_04,
              'vector':[float(embedding_mode.wv.similarity(w1='문화',w2=i)) for i in cul_20_04]})

print(embedding_mode.wv.most_similar(positive=['취미'],topn=100))
#극복(+)/슬기로운(+)/씁쓸한(-)/즐기고(+)/즐거움(+)/재치(+)
cul=word()
cul_20_04_1=cul.input_word("극복")
cul_20_04_1=cul.input_word("슬기로운")
cul_20_04_1=cul.input_word("씁쓸한")
cul_20_04_1=cul.input_word("즐기고")
cul_20_04_1=cul.input_word("즐거움")
cul_20_04_1=cul.input_word("재치")
cul_2020_04=cul_2020_04.append(pd.DataFrame({'keyword':['취미' for i in range(0,len(cul_20_04_1))],'target':cul_20_04_1,
              'vector':[float(embedding_mode.wv.similarity(w1='취미',w2=i)) for i in cul_20_04_1]}))
cul_2020_04['positive']=['+','+','+','+','+','+','+','+','-','+','+','-','+','+','+']
cul_2020_04=cul_2020_04.reset_index(drop=True)
print(cul_2020_04)

#from cul202005
embedding_mode= Word2Vec(cul202005, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['문화'],topn=100))
#확산(-)/다양한(+)/배낭여행(+)/좋아했다(+)/유치했다(-)
cul=word()
cul_20_05=cul.input_word("확산")
cul_20_05=cul.input_word("다양한")
cul_20_05=cul.input_word("배낭여행")
cul_20_05=cul.input_word("좋아했다")
cul_20_05=cul.input_word("유치했다")
cul_2020_05=pd.DataFrame({'keyword':['문화' for i in range(0,len(cul_20_05))],'target':cul_20_05,
              'vector':[float(embedding_mode.wv.similarity(w1='문화',w2=i)) for i in cul_20_05]})
cul_2020_05['positive']=['-','+','+','+','-']
print(cul_2020_05)

'''
#culture 2019
result: cul_2019_02  ~  cul_2019_05
'''
#from cul201902
embedding_mode= Word2Vec(cul201902, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['문화'],topn=100))
#성숙한(+)/안전하답니다(+)/열정(+)/역량(+)/우승(+)
cul=word()
cul_19_02=cul.input_word("성숙한")
cul_19_02=cul.input_word("안전하답니다")
cul_19_02=cul.input_word("열정")
cul_19_02=cul.input_word("역량")
cul_19_02=cul.input_word("우승했다")
cul_2019_02=pd.DataFrame({'keyword':['문화' for i in range(0,len(cul_19_02))],'target':cul_19_02,
              'vector':[float(embedding_mode.wv.similarity(w1='문화',w2=i)) for i in cul_19_02]})

print(embedding_mode.wv.most_similar(positive=['취미'],topn=100))
#좋아하는(+)/중요한(+)/소박하다(+)/성숙한(+)
cul=word()
cul_19_02_1=cul.input_word("좋아하는")
cul_19_02_1=cul.input_word("중요한")
cul_19_02_1=cul.input_word("소박하다")
cul_19_02_1=cul.input_word("성숙한")
cul_2019_02=cul_2019_02.append(pd.DataFrame({'keyword':['취미' for i in range(0,len(cul_19_02_1))],'target':cul_19_02_1,
              'vector':[float(embedding_mode.wv.similarity(w1='취미',w2=i)) for i in cul_19_02_1]}))
cul_2019_02['positive']=['+','+','+','+','+','+','+','+','+']
cul_2019_02=cul_2019_02.reset_index(drop=True)
print(cul_2019_02)

#from cul201903
embedding_mode= Word2Vec(cul201903, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['문화'],topn=100))
#줄면서(-)/다지는(+)/없는(-)/뜨거웠다(+)/짜릿함과(+)/강했지만(+)
cul=word()
cul_19_03=cul.input_word("줄면서")
cul_19_03=cul.input_word("다지는")
cul_19_03=cul.input_word("없는")
cul_19_03=cul.input_word("뜨거웠다")
cul_19_03=cul.input_word("짜릿함과")
cul_19_03=cul.input_word("강했지만")
cul_2019_03=pd.DataFrame({'keyword':['문화' for i in range(0,len(cul_19_03))],'target':cul_19_03,
              'vector':[float(embedding_mode.wv.similarity(w1='문화',w2=i)) for i in cul_19_03]})
cul_2019_03['positive']=['-','+','-','+','+','+']
print(cul_2019_03)

#from cul201904
embedding_mode= Word2Vec(cul201904, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['문화'],topn=100))
#불과했다(-)/기대해(+)/않아(-)/적합하다는(+)/당황(-)/신선했다(+)
cul=word()
cul_19_04=cul.input_word("불과했다")
cul_19_04=cul.input_word("기대해")
cul_19_04=cul.input_word("않아")
cul_19_04=cul.input_word("적합하다는")
cul_19_04=cul.input_word("당황")
cul_19_04=cul.input_word("신선했다")
cul_2019_04=pd.DataFrame({'keyword':['문화' for i in range(0,len(cul_19_04))],'target':cul_19_04,
              'vector':[float(embedding_mode.wv.similarity(w1='문화',w2=i)) for i in cul_19_04]})
cul_2019_04['positive']=['-','+','-','+','-','+']
print(cul_2019_04)

#from cul201905
embedding_mode= Word2Vec(cul201905, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['문화'],topn=100))
#놀이(+)/선물(+)/유행(+)/교류(+)/힐링(+)/광범위하게(+)/않는다(-)/생명력(+)/효행(+)/맑은(+)
cul=word()
cul_19_05=cul.input_word("놀이")
cul_19_05=cul.input_word("선물")
cul_19_05=cul.input_word("유행")
cul_19_05=cul.input_word("교류")
cul_19_05=cul.input_word("힐링")
cul_19_05=cul.input_word("광범위하게")
cul_19_05=cul.input_word("않는다")
cul_19_05=cul.input_word("생명력")
cul_19_05=cul.input_word("효행")
cul_19_05=cul.input_word("맑은")
cul_2019_05=pd.DataFrame({'keyword':['문화' for i in range(0,len(cul_19_05))],'target':cul_19_05,
              'vector':[float(embedding_mode.wv.similarity(w1='문화',w2=i)) for i in cul_19_05]})
cul_2019_05['positive']=['+','+','+','+','+','+','-','+','+','+']
print(cul_2019_05)

'''
#medi 2020
result: medi_2020_02  ~  medi_2020_05
'''

#from medi202002
embedding_mode= Word2Vec(medi202002, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['의료'],topn=100))
#떨어진다(-)/ 싸우는(-)/ 피로(-)/폐쇄입니(-)/열악하다(-)/마비(-)/폐쇄(-)/회복(+)
medi=word()
medi_20_02=medi.input_word("떨어진다")
medi_20_02=medi.input_word("싸우는")
medi_20_02=medi.input_word("피로")
medi_20_02=medi.input_word("폐쇄입니")
medi_20_02=medi.input_word("열악하다")
medi_20_02=medi.input_word("마비")
medi_20_02=medi.input_word("폐쇄")
medi_20_02=medi.input_word("회복")
medi_2020_02=pd.DataFrame({'keyword':['의료' for i in range(0,len(medi_20_02))],'target':medi_20_02,
              'vector':[float(embedding_mode.wv.similarity(w1='의료',w2=i)) for i in medi_20_02]})
medi_2020_02['positive']=['-','-','-','-','-','-','-','+']
medi_2020_02.at[3,'target']='폐쇄'
print(medi_2020_02)

#from medi202003
embedding_mode= Word2Vec(medi202003, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['의료'],topn=100))
#협업(+)/감염증(-)/확진(-)/찔려(-)/노력(+)/다양한(+)/이뤄졌다(+)/불안감(-)/책임(-)
medi=word()
medi_20_03=medi.input_word("협업")
medi_20_03=medi.input_word("감염증")
medi_20_03=medi.input_word("확진")
medi_20_03=medi.input_word("찔려")
medi_20_03=medi.input_word("노력")
medi_20_03=medi.input_word("다양한")
medi_20_03=medi.input_word("이뤄졌다")
medi_20_03=medi.input_word("불안감")
medi_20_03=medi.input_word("책임")
medi_2020_03=pd.DataFrame({'keyword':['의료' for i in range(0,len(medi_20_03))],'target':medi_20_03,
              'vector':[float(embedding_mode.wv.similarity(w1='의료',w2=i)) for i in medi_20_03]})
medi_2020_03['positive']=['+','-','-','-','+','+','+','-','-']
print(medi_2020_03)

#from medi202004
embedding_mode= Word2Vec(medi202004, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['의료'],topn=100))
#위반(-)/압박(-)/연장(-)/악화(-)/윤리(+)/않기로(-)/화해(+)/면역(+)/협업(+)/비판(-)/죄송하다(-)
medi=word()
medi_20_04=medi.input_word("위반")
medi_20_04=medi.input_word("압박")
medi_20_04=medi.input_word("연장")
medi_20_04=medi.input_word("악화")
medi_20_04=medi.input_word("윤리")
medi_20_04=medi.input_word("않기로")
medi_20_04=medi.input_word("화해")
medi_20_04=medi.input_word("면역")
medi_20_04=medi.input_word("협업")
medi_20_04=medi.input_word("비판")
medi_20_04=medi.input_word("죄송하다")
medi_2020_04=pd.DataFrame({'keyword':['의료' for i in range(0,len(medi_20_04))],'target':medi_20_04,
              'vector':[float(embedding_mode.wv.similarity(w1='의료',w2=i)) for i in medi_20_04]})

medi_2020_04['positive']=['-','-','-','-','+','-','+','+','+','-','-']
print(medi_2020_04)

#from medi202005
embedding_mode= Word2Vec(medi202005, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['의료'],topn=100))
#대란(-)/active(+)/일어날지도(암시,-)/방호복(-)/종교시설(-)/모른다(-)/집착(-)/참여(+)/Care(+)/않습니다(-)/
medi=word()
medi_20_05=medi.input_word("대란")
medi_20_05=medi.input_word("active")
medi_20_05=medi.input_word("일어날지도")
medi_20_05=medi.input_word("방호복")
medi_20_05=medi.input_word("종교시설")
medi_20_05=medi.input_word("모른다")
medi_20_05=medi.input_word("집착")
medi_20_05=medi.input_word("참여")
medi_20_05=medi.input_word("Care")
medi_20_05=medi.input_word("않습니다")
medi_2020_05=pd.DataFrame({'keyword':['의료' for i in range(0,len(medi_20_05))],'target':medi_20_05,
              'vector':[float(embedding_mode.wv.similarity(w1='의료',w2=i)) for i in medi_20_05]})
medi_2020_05['positive']=['-','+','-','-','-','-','-','+','+','-']
print(medi_2020_05)

'''
#medi 2019
result: medi_2019_02  ~  medi_2019_05
'''
#from medi201902
embedding_mode= Word2Vec(medi201902, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['의료'],topn=100))
#care(+)/잘(+)/못(-)/하지만(-)/Healthiest(+)/새로운(+)/않겠다는(-)/사망자(-)
medi=word()
medi_19_02=medi.input_word("care")
medi_19_02=medi.input_word("잘")
medi_19_02=medi.input_word("못")
medi_19_02=medi.input_word("하지만")
medi_19_02=medi.input_word("Healthiest")
medi_19_02=medi.input_word("새로운")
medi_19_02=medi.input_word("않겠다는")
medi_19_02=medi.input_word("사망자")

medi_2019_02=pd.DataFrame({'keyword':['의료' for i in range(0,len(medi_19_02))],'target':medi_19_02,
              'vector':[float(embedding_mode.wv.similarity(w1='의료',w2=i)) for i in medi_19_02]})
medi_2019_02['positive']=['+','+','-','-','+','+','-','-']
print(medi_2019_02)

#from medi201903
embedding_mode= Word2Vec(medi201903, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['의료'],topn=100))
#중단(-)/늘리고(+)/말기(-)/폭력(-)/객관성(+)/안전(+)/예방(+)/않는다(-)
medi=word()
medi_19_03=medi.input_word("중단")
medi_19_03=medi.input_word("늘리고")
medi_19_03=medi.input_word("말기")
medi_19_03=medi.input_word("폭력")
medi_19_03=medi.input_word("객관성")
medi_19_03=medi.input_word("안전")
medi_19_03=medi.input_word("예방")
medi_19_03=medi.input_word("않는다")
medi_2019_03=pd.DataFrame({'keyword':['의료' for i in range(0,len(medi_19_03))],'target':medi_19_03,
              'vector':[float(embedding_mode.wv.similarity(w1='의료',w2=i)) for i in medi_19_03]})
medi_2019_03['positive']=['-','+','-','-','+','+','+','-']
print(medi_2019_03)

#from medi201904
embedding_mode= Word2Vec(medi201904, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['의료'],topn=100))
#지식(+)/필요한(+)/부담(-)/좋다(+)/유예(-)
medi=word()
medi_19_04=medi.input_word("지식")
medi_19_04=medi.input_word("필요한")
medi_19_04=medi.input_word("부담")
medi_19_04=medi.input_word("좋다")
medi_19_04=medi.input_word("유예")
medi_2019_04=pd.DataFrame({'keyword':['의료' for i in range(0,len(medi_19_04))],'target':medi_19_04,
              'vector':[float(embedding_mode.wv.similarity(w1='의료',w2=i)) for i in medi_19_04]})
medi_2019_04['positive']=['+','+','-','+','-']
print(medi_2019_04)

#from medi201905
embedding_mode= Word2Vec(medi201905, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['의료'],topn=100))
#피부관리(+)/방해(-)/완전히(+)/다양한(+)/않는다(-)/
medi=word()
medi_19_05=medi.input_word("피부관리")
medi_19_05=medi.input_word("방해")
medi_19_05=medi.input_word("완전히")
medi_19_05=medi.input_word("다양한")
medi_19_05=medi.input_word("않는다")
medi_2019_05=pd.DataFrame({'keyword':['의료' for i in range(0,len(medi_19_05))],'target':medi_19_05,
              'vector':[float(embedding_mode.wv.similarity(w1='의료',w2=i)) for i in medi_19_05]})
medi_2019_05['positive']=['+','-','+','+','-']
print(medi_2019_05)

'''
#leisure 2020
result: leisure_2020_02  ~  leisure_2020_05
'''
#from leisure202002
embedding_mode= Word2Vec(leisure202002, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['레저'],topn=100))
#찾는(+)/보트(+)/함께(+)/해변(+)/새롭게(+)/명소(+)/색다른(+)
leisure=word()
leisure_20_02=leisure.input_word("찾는")
leisure_20_02=leisure.input_word("보트")
leisure_20_02=leisure.input_word("함께")
leisure_20_02=leisure.input_word("해변")
leisure_20_02=leisure.input_word("새롭게")
leisure_20_02=leisure.input_word("명소")
leisure_20_02=leisure.input_word("색다른")
leisure_2020_02=pd.DataFrame({'keyword':['레저' for i in range(0,len(leisure_20_02))],'target':leisure_20_02,
              'vector':[float(embedding_mode.wv.similarity(w1='레저',w2=i)) for i in leisure_20_02]})
leisure_2020_02['positive']=['+','+','+','+','+','+','+']
print(leisure_2020_02)

#from leisure202003
embedding_mode= Word2Vec(leisure202003, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['레저'],topn=100))
#축제(+)/휴양(+)/기대하고(+)/친근한(+)/대단한(+)/편안한(+)
leisure=word()
leisure_20_03=leisure.input_word("축제")
leisure_20_03=leisure.input_word("휴양")
leisure_20_03=leisure.input_word("기대하고")
leisure_20_03=leisure.input_word("친근한")
leisure_20_03=leisure.input_word("대단한")
leisure_20_03=leisure.input_word("편안한")
leisure_2020_03=pd.DataFrame({'keyword':['레저' for i in range(0,len(leisure_20_03))],'target':leisure_20_03,
              'vector':[float(embedding_mode.wv.similarity(w1='레저',w2=i)) for i in leisure_20_03]})
leisure_2020_03['positive']=['+','+','+','+','+','+']
print(leisure_2020_03)

#from leisure202004
embedding_mode= Word2Vec(leisure202004, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['레저'],topn=100))
#휴식(+)/즐기려는(+)/건강한(+)/즐길(+)/다양한(+)/불안해진다(-)/불가능하다(-)
leisure=word()
leisure_20_04=leisure.input_word("휴식")
leisure_20_04=leisure.input_word("즐기려는")
leisure_20_04=leisure.input_word("건강한")
leisure_20_04=leisure.input_word("즐길")
leisure_20_04=leisure.input_word("다양한")
leisure_20_04=leisure.input_word("불안해진다")
leisure_20_04=leisure.input_word("불가능하다")
leisure_2020_04=pd.DataFrame({'keyword':['레저' for i in range(0,len(leisure_20_04))],'target':leisure_20_04,
              'vector':[float(embedding_mode.wv.similarity(w1='레저',w2=i)) for i in leisure_20_04]})
leisure_2020_04['positive']=['+','+','+','+','+','-','-']
print(leisure_2020_04)

#from leisure202005
embedding_mode= Word2Vec(leisure202005, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['레저'],topn=100))
#없고(-)/해양(+)/쏘다니는(+)/담긴(+)
#print(embedding_mode.wv.most_similar(positive=['관광'],topn=100)) : 다를게 없음
leisure=word()
leisure_20_05=leisure.input_word("없고")
leisure_20_05=leisure.input_word("해양")
leisure_20_05=leisure.input_word("쏘다니는")
leisure_20_05=leisure.input_word("담긴")
leisure_2020_05=pd.DataFrame({'keyword':['레저' for i in range(0,len(leisure_20_05))],'target':leisure_20_05,
              'vector':[float(embedding_mode.wv.similarity(w1='레저',w2=i)) for i in leisure_20_05]})
leisure_2020_05['positive']=['-','+','+','+']
print(leisure_2020_05)

'''
#leisure 2019
result: leisure_2019_02  ~  leisure_2019_05
'''
#from leisure201902
embedding_mode= Word2Vec(leisure201902, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['레저'],topn=100))
#않아(-)/결합(+)/가까워(+)/함께(+)/밤하늘(+)/앓았던(-)/단순한(+)
leisure=word()
leisure_19_02=leisure.input_word("않아")
leisure_19_02=leisure.input_word("결합")
leisure_19_02=leisure.input_word("가까워")
leisure_19_02=leisure.input_word("함께")
leisure_19_02=leisure.input_word("밤하늘")
leisure_19_02=leisure.input_word("앓았던")
leisure_19_02=leisure.input_word("단순한")
leisure_2019_02=pd.DataFrame({'keyword':['레저' for i in range(0,len(leisure_19_02))],'target':leisure_19_02,
              'vector':[float(embedding_mode.wv.similarity(w1='레저',w2=i)) for i in leisure_19_02]})
leisure_2019_02['positive']=['-','+','+','+','+','-','+']
print(leisure_2019_02)

#from leisure201903
embedding_mode= Word2Vec(leisure201903, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['레저'],topn=100))
#허세(-)/통증(-)/프리미엄(+)/필수(+)/좋다며(+)/해롭습니다(-)
leisure=word()
leisure_19_03=leisure.input_word("허세")
leisure_19_03=leisure.input_word("통증")
leisure_19_03=leisure.input_word("프리미엄")
leisure_19_03=leisure.input_word("필수")
leisure_19_03=leisure.input_word("좋다며")
leisure_19_03=leisure.input_word("해롭습니다")
leisure_2019_03=pd.DataFrame({'keyword':['레저' for i in range(0,len(leisure_19_03))],'target':leisure_19_03,
              'vector':[float(embedding_mode.wv.similarity(w1='레저',w2=i)) for i in leisure_19_03]})
leisure_2019_03['positive']=['-','-','+','+','+','-']
print(leisure_2019_03)

#from leisure201904
embedding_mode= Word2Vec(leisure201904, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['레저'],topn=100))
#해양(+)/받는(+)/참여(+)/재난(-)/색다른(+)/늘었다(+)/불황(-)
leisure=word()
leisure_19_04=leisure.input_word("해양")
leisure_19_04=leisure.input_word("받는")
leisure_19_04=leisure.input_word("참여")
leisure_19_04=leisure.input_word("재난")
leisure_19_04=leisure.input_word("색다른")
leisure_19_04=leisure.input_word("늘었다")
leisure_19_04=leisure.input_word("불황")
leisure_2019_04=pd.DataFrame({'keyword':['레저' for i in range(0,len(leisure_19_04))],'target':leisure_19_04,
              'vector':[float(embedding_mode.wv.similarity(w1='레저',w2=i)) for i in leisure_19_04]})
leisure_2019_04['positive']=['+','+','+','-','+','+','-']
print(leisure_2019_04)

#from leisure201905
embedding_mode= Word2Vec(leisure201905, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['레저'],topn=100))
#캠핑장(+)/휴식(+)/수상(+)/외식(+)/꿀맛(+)/꿀잠(+)/꿀잼(+)
leisure=word()
leisure_19_05=leisure.input_word("캠핑장")
leisure_19_05=leisure.input_word("휴식")
leisure_19_05=leisure.input_word("수상")
leisure_19_05=leisure.input_word("외식")
leisure_19_05=leisure.input_word("꿀맛")
leisure_19_05=leisure.input_word("꿀잠")
leisure_19_05=leisure.input_word("꿀잼")
leisure_2019_05=pd.DataFrame({'keyword':['레저' for i in range(0,len(leisure_19_05))],'target':leisure_19_05,
              'vector':[float(embedding_mode.wv.similarity(w1='레저',w2=i)) for i in leisure_19_05]})
leisure_2019_05['positive']=['+','+','+','+','+','+','+']
print(leisure_2019_05)

'''
#stay 2020
result: stay_2020_02  ~  stay_2020_05
'''
#from stay202002
embedding_mode= Word2Vec(stay202002, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['숙박'],topn=100))
#함께(+)/한산한(-)/않을(-)/새로운(+)/썰렁한(-)
stay=word()
stay_20_02=stay.input_word("함께")
stay_20_02=stay.input_word("한산한")
stay_20_02=stay.input_word("않을")
stay_20_02=stay.input_word("새로운")
stay_20_02=stay.input_word("썰렁한")
stay_2020_02=pd.DataFrame({'keyword':['숙박' for i in range(0,len(stay_20_02))],'target':stay_20_02,
              'vector':[float(embedding_mode.wv.similarity(w1='숙박',w2=i)) for i in stay_20_02]})
stay_2020_02['positive']=['+','-','-','+','-']
print(stay_2020_02)

#from stay202003
embedding_mode= Word2Vec(stay202003, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['숙박'],topn=100))
# 원하는(+)/협력(+)/다양한(+)/좋다(+)/가까운(+)/최신(+)
stay=word()
stay_20_03=stay.input_word("원하는")
stay_20_03=stay.input_word("협력")
stay_20_03=stay.input_word("다양한")
stay_20_03=stay.input_word("좋다")
stay_20_03=stay.input_word("가까운")
stay_20_03=stay.input_word("최신")
stay_2020_03=pd.DataFrame({'keyword':['숙박' for i in range(0,len(stay_20_03))],'target':stay_20_03,
              'vector':[float(embedding_mode.wv.similarity(w1='숙박',w2=i)) for i in stay_20_03]})
stay_2020_03['positive']=['+','+','+','+','+','+']
print(stay_2020_03)

#from stay202004
embedding_mode= Word2Vec(stay202004, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['숙박'],topn=100))
#용이(+)/여파(-)/떨어지면서(-)/직격탄(-)/아니었다(-)/없었는데(-)/헐값(-)/많던(-)/긴장감(-)/곤란하다고(-)
stay=word()
stay_20_04=stay.input_word("용이")
stay_20_04=stay.input_word("여파")
stay_20_04=stay.input_word("떨어지면서")
stay_20_04=stay.input_word("직격탄")
stay_20_04=stay.input_word("아니었다")
stay_20_04=stay.input_word("없었는데")
stay_20_04=stay.input_word("헐값")
stay_20_04=stay.input_word("많던")
stay_20_04=stay.input_word("긴장감")
stay_20_04=stay.input_word("곤란하다고")
stay_2020_04=pd.DataFrame({'keyword':['숙박' for i in range(0,len(stay_20_04))],'target':stay_20_04,
              'vector':[float(embedding_mode.wv.similarity(w1='숙박',w2=i)) for i in stay_20_04]})
stay_2020_04['positive']=['+','-','-','-','-','-','-','-','-','-']
print(stay_2020_04)

#from stay202005
embedding_mode= Word2Vec(stay202005, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['숙박'],topn=100))
#완성(+)/외식(+)/맛집(+)/고문(-)/손실(-)/했지만(-)/적발(-)/불법(-)/사기(-)
stay=word()
stay_20_05=stay.input_word("완성")
stay_20_05=stay.input_word("외식")
stay_20_05=stay.input_word("맛집")
stay_20_05=stay.input_word("고문")
stay_20_05=stay.input_word("손실")
stay_20_05=stay.input_word("했지만")
stay_20_05=stay.input_word("적발")
stay_20_05=stay.input_word("불법")
stay_20_05=stay.input_word("사기")
stay_2020_05=pd.DataFrame({'keyword':['숙박' for i in range(0,len(stay_20_05))],'target':stay_20_05,
              'vector':[float(embedding_mode.wv.similarity(w1='숙박',w2=i)) for i in stay_20_05]})
stay_2020_05['positive']=['+','+','+','-','-','-','-','-','-']
print(stay_2020_05)

'''
#stay 2019
result: stay_2019_02  ~  stay_2019_05
'''
#from stay201902
embedding_mode= Word2Vec(stay201902, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['숙박'],topn=100))
#편의(+)/복합(+)/최대(+)/부당(-)/어려움(-)/편리하게(+)/자유(+)
stay=word()
stay_19_02=stay.input_word("편의")
stay_19_02=stay.input_word("복합")
stay_19_02=stay.input_word("최대")
stay_19_02=stay.input_word("부당")
stay_19_02=stay.input_word("어려움")
stay_19_02=stay.input_word("편리하게")
stay_19_02=stay.input_word("자유")
stay_2019_02=pd.DataFrame({'keyword':['숙박' for i in range(0,len(stay_19_02))],'target':stay_19_02,
              'vector':[float(embedding_mode.wv.similarity(w1='숙박',w2=i)) for i in stay_19_02]})
stay_2019_02['positive']=['-','-','-','+','-','+','+']
print(stay_2019_02)

#from stay201903
embedding_mode= Word2Vec(stay201903, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['숙박'],topn=100))
#징계(-)/슬픔(-)/모든(+)/함께(+)/사고(-)/절반(-)/어렵게(-)/
stay=word()
stay_19_03=stay.input_word("징계")
stay_19_03=stay.input_word("슬픔")
stay_19_03=stay.input_word("모든")
stay_19_03=stay.input_word("함께")
stay_19_03=stay.input_word("사고")
stay_19_03=stay.input_word("절반")
stay_19_03=stay.input_word("어렵게")
stay_2019_03=pd.DataFrame({'keyword':['숙박' for i in range(0,len(stay_19_03))],'target':stay_19_03,
              'vector':[float(embedding_mode.wv.similarity(w1='숙박',w2=i)) for i in stay_19_03]})
stay_2019_03['positive']=['-','-','+','+','-','-','-']
print(stay_2019_03)

#from stay201904
embedding_mode= Word2Vec(stay201904, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['숙박'],topn=100))
#했지만(-)/그런데(-)/부담(-)/거절(-)/쟁점(-)/다양한(+)/최저(-)
stay=word()
stay_19_04=stay.input_word("했지만")
stay_19_04=stay.input_word("그런데")
stay_19_04=stay.input_word("부담")
stay_19_04=stay.input_word("거절")
stay_19_04=stay.input_word("쟁점")
stay_19_04=stay.input_word("다양한")
stay_19_04=stay.input_word("최저")
stay_2019_04=pd.DataFrame({'keyword':['숙박' for i in range(0,len(stay_19_04))],'target':stay_19_04,
              'vector':[float(embedding_mode.wv.similarity(w1='숙박',w2=i)) for i in stay_19_04]})
stay_2019_04['positive']=['-','-','-','-','-','+','-']
print(stay_2019_04)

#from stay201905
embedding_mode= Word2Vec(stay201905, size=100,window=2,
                         min_count=1, workers=4, iter=100,
                         sg=1)
print(embedding_mode.wv.most_similar(positive=['숙박'],topn=100))
#편의(+)/비용(-)/하기에는(-)/건너갔다(-)/부적절하다는(-)/폭언(-)/실종(-)/욕설(-)
stay=word()
stay_19_05=stay.input_word("편의")
stay_19_05=stay.input_word("비용")
stay_19_05=stay.input_word("하기에는")
stay_19_05=stay.input_word("건너갔다")
stay_19_05=stay.input_word("부적절하다는")
stay_19_05=stay.input_word("폭언")
stay_19_05=stay.input_word("실종")
stay_19_05=stay.input_word("욕설")
stay_2019_05=pd.DataFrame({'keyword':['숙박' for i in range(0,len(stay_19_05))],'target':stay_19_05,
              'vector':[float(embedding_mode.wv.similarity(w1='숙박',w2=i)) for i in stay_19_05]})
stay_2019_05['positive']=['+','-','-','-','-','-','-','-']
print(stay_2019_05)

#================================================================================
#================================================================================

import urllib.request as req
from urllib.request import urlopen
from konlpy.tag import Kkma
from konlpy.tag import Komoran
from konlpy.tag import Hannanum
from konlpy.tag import Okt
import collections
from bs4 import BeautifulSoup
import re
import pandas as pd
import numpy as np
from numpy import nan as na
from pandas import Series, DataFrame
from urllib.parse import quote # 아스키 문자로 변환해주는 함수
import json
from fake_useragent import UserAgent
import requests
import json
import pandas as pd
import numpy as np
#========================================================================================================

# 카드데이터
card = pd.read_table('c:/big/card.txt')
card



#=====================================================================================================
# 업종(10) : 숙박, 일자별 이용금액
store10_amt = card.loc[card['MCT_CAT_CD'].apply(lambda x : x == 10)][['STD_DD','USE_CNT','USE_AMT']]
store10_amt = store10_amt.reset_index()
del store10_amt['index']
store10_amt = store10_amt.rename(columns = {'STD_DD' : '일자', 'USE_CNT' : '이용건수' ,'USE_AMT':'이용금액'})
store10_amt # 숙박 일자별 이용금액

# 업종(20, 21) : 레저관련, 일자별 이용금액
store20_21_amt = card.loc[card['MCT_CAT_CD'].apply(lambda x : x == 20 or x == 21)][['STD_DD','USE_CNT','USE_AMT']]
store20_21_amt = store20_21_amt.reset_index()
del store20_21_amt['index']
store20_21_amt = store20_21_amt.rename(columns = {'STD_DD' : '일자', 'USE_CNT' : '이용건수' ,'USE_AMT':'이용금액'})
store20_21_amt # 레저, 일자별 이용금액

# 업종(22) : 문화취미, 일자별 이용금액
store22_amt = card.loc[card['MCT_CAT_CD'].apply(lambda x : x == 22)][['STD_DD','USE_CNT','USE_AMT']]
store22_amt = store22_amt.reset_index()
del store22_amt['index']
store22_amt = store22_amt.rename(columns = {'STD_DD' : '일자', 'USE_CNT' : '이용건수' ,'USE_AMT':'이용금액'})
store22_amt

# 업종(70) : 의료기관, 일자별 이용금액
store70_amt = card.loc[card['MCT_CAT_CD'].apply(lambda x : x == 70)][['STD_DD','USE_CNT','USE_AMT']]
store70_amt = store70_amt.reset_index()
del store70_amt['index']
store70_amt =store70_amt.rename(columns = {'STD_DD' : '일자', 'USE_CNT' : '이용건수' ,'USE_AMT':'이용금액'})
store70_amt

# 업종(71) : 보건위생, 일자별 이용금액
store71_amt = card.loc[card['MCT_CAT_CD'].apply(lambda x : x == 71)][['STD_DD','USE_CNT','USE_AMT']]
store71_amt = store71_amt.reset_index()
del store71_amt['index']
store71_amt =store71_amt.rename(columns = {'STD_DD' : '일자', 'USE_CNT' : '이용건수' ,'USE_AMT':'이용금액'})
store71_amt

# 업종(80, 81) : 요식업소,음료식품 일자별 이용금액
store80_81_amt = card.loc[card['MCT_CAT_CD'].apply(lambda x : x == 80 or x == 81)][['STD_DD','USE_CNT','USE_AMT']]
store80_81_amt = store80_81_amt.reset_index()
del store80_81_amt['index']
store80_81_amt = store80_81_amt.rename(columns = {'STD_DD' : '일자', 'USE_CNT' : '이용건수' ,'USE_AMT':'이용금액'})




#======================================================================================================================

# 19년 2월 숙박관련 정보

store10_2_amt = store10_amt.loc[store10_amt['일자'].apply(lambda x : 20190201 <= x <=  20190228)][['일자','이용건수','이용금액']]
store10_2_amt = store10_2_amt.reset_index()
del store10_2_amt['index']
store10_2_amt

PN = stay_2019_02['vector'] / stay_2019_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))

vec = pd.DataFrame(vec)

type(store10_3_amt)
store10_2_amt1 = pd.concat([store10_2_amt, vec], ignore_index=True, axis = 1)
store10_2_amt = store10_2_amt1.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store10_2_amt = store10_2_amt1.fillna(0)
store10_2_amt # 19년 2월 숙박

#==========================================================================================


# 19년 3월 숙박관련 정보

store10_3_amt = store10_amt.loc[store10_amt['일자'].apply(lambda x : 20190301 <= x <=  20190331)][['일자','이용건수','이용금액']]
store10_3_amt 
store10_3_amt = store10_3_amt.reset_index()
del store10_3_amt['index']
store10_3_amt

PN = stay_2019_03['vector'] / stay_2019_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))

vec = pd.DataFrame(vec)

type(store10_3_amt)
store10_3_amt1 = pd.concat([store10_3_amt, vec], ignore_index=True, axis = 1)
store10_3_amt1 = store10_3_amt1.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store10_3_amt1 = store10_3_amt1.fillna(0)
store10_3_amt1 # 19년 3월 숙박


#==========================================================================================

# 19년 4월 숙박관련 정보

store10_amt2 = store10_amt.loc[store10_amt['일자'].apply(lambda x : 20190401 <= x <=  20190430)][['일자','이용건수','이용금액']]
store10_amt2 
store10_amt2 = store10_amt2.reset_index()
del store10_amt2['index']
store10_amt2

PN = stay_2019_04['vector'] / stay_2019_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))

vec = pd.DataFrame(vec)

type(store10_amt2)
store10_4_amt = pd.concat([store10_amt2, vec], ignore_index=True, axis = 1)
store10_4_amt = store10_4_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store10_4_amt = store10_4_amt.fillna(0)
store10_4_amt # 19년 4월 숙박


#==========================================================================================
# 19년 5월 숙박관련 정보

store10_amt1 = store10_amt.loc[store10_amt['일자'].apply(lambda x : 20190501 <= x <=  20190531)][['일자','이용건수','이용금액']]
store10_amt1
store10_amt1 = store10_amt1.reset_index()
del store10_amt1['index']

PN = stay_2019_05['vector'] / stay_2019_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))

vec = pd.DataFrame(vec)

type(store10_amt1)
store10_5_amt = pd.concat([store10_amt1, vec], ignore_index=True, axis = 1)
store10_5_amt1 = store10_5_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store10_5_amt1 = store10_5_amt1.fillna(0)
store10_5_amt1 # 19년 5월 숙박

#==========================================================================================
# 20년 2월 숙박관련 정보

store20_amt1 = store10_amt.loc[store10_amt['일자'].apply(lambda x : 20200201 <= x <=  20200228)][['일자','이용건수','이용금액']]
store20_amt1
store20_amt1 = store20_amt1.reset_index()
del store20_amt1['index']
store20_amt1
PN = stay_2020_02['vector'] / stay_2020_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))


vec = pd.DataFrame(vec)

type(store20_amt1)
store20_2_amt = pd.concat([store20_amt1, vec], ignore_index=True, axis = 1)
store20_2_amt1 = store20_2_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store20_2_amt1 = store20_2_amt1.fillna(0)
store20_2_amt1 # 20년 2월 숙박

#==========================================================================================
# 20년 3월 숙박관련 정보

store20_amt2 = store10_amt.loc[store10_amt['일자'].apply(lambda x : 20200301 <= x <=  20200331)][['일자','이용건수','이용금액']]
store20_amt2
store20_amt2 = store20_amt2.reset_index()
del store20_amt2['index']
store20_amt2
PN = stay_2020_03['vector'] / stay_2020_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))

vec = pd.DataFrame(vec)

type(store20_amt1)
store20_3_amt = pd.concat([store20_amt2, vec], ignore_index=True, axis = 1)
store20_3_amt1 = store20_3_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store20_3_amt1 = store20_3_amt1.fillna(0)
store20_3_amt1 # 20년 3월 숙박

#==========================================================================================
# 20년 4월 숙박관련 정보

store20_amt3 = store10_amt.loc[store10_amt['일자'].apply(lambda x : 20200401 <= x <=  20200430)][['일자','이용건수','이용금액']]
store20_amt3
store20_amt3 = store20_amt3.reset_index()
del store20_amt3['index']
store20_amt3
PN = stay_2020_04['vector'] / stay_2020_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))
    elif i == PN[9]:
        vec.append('-{}'.format(PN[9]))


vec = pd.DataFrame(vec)

type(store20_amt1)
store20_4_amt = pd.concat([store20_amt3, vec], ignore_index=True, axis = 1)
store20_4_amt1 = store20_4_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store20_4_amt1 = store20_4_amt1.fillna(0)
store20_4_amt1 # 20년 4월 숙박

#==========================================================================================
# 20년 5월 숙박관련 정보

store20_amt4 = store10_amt.loc[store10_amt['일자'].apply(lambda x : 20200501 <= x <=  20200531)][['일자','이용건수','이용금액']]
store20_amt4
store20_amt4 = store20_amt4.reset_index()
del store20_amt4['index']
store20_amt4
PN = stay_2020_05['vector'] / stay_2020_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))


vec = pd.DataFrame(vec)

store20_5_amt = pd.concat([store20_amt4, vec], ignore_index=True, axis = 1)
store20_5_amt1 = store20_5_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store20_5_amt1 = store20_5_amt1.fillna(0)
store20_5_amt1 # 20년 5월 숙박

#==========================================================================================
# 19년 2월 문화취미관련 정보

store22_amt1 = store22_amt.loc[store22_amt['일자'].apply(lambda x : 20190201 <= x <=  20190228)][['일자','이용건수','이용금액']]
store22_amt1
store22_amt1 = store22_amt1.reset_index()
del store22_amt1['index']
PN = cul_2019_02['vector'] / cul_2019_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))


vec = pd.DataFrame(vec)

store22_19_2_amt = pd.concat([store22_amt1, vec], ignore_index=True, axis = 1)
store22_19_2_amt = store22_19_2_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store22_19_2_amt = store22_19_2_amt.fillna(0)
store22_19_2_amt # 19년 2월 문화취미

#==========================================================================================
# 19년 3월 문화취미관련 정보

store22_amt2 = store22_amt.loc[store22_amt['일자'].apply(lambda x : 20190301 <= x <=  20190331)][['일자','이용건수','이용금액']]
store22_amt2 
store22_amt2 = store22_amt2.reset_index()
del store22_amt2['index']
PN = cul_2019_03['vector'] / cul_2019_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))


vec = pd.DataFrame(vec)

store22_19_3_amt = pd.concat([store22_amt2, vec], ignore_index=True, axis = 1)
store22_19_3_amt = store22_19_3_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store22_19_3_amt = store22_19_3_amt.fillna(0)
store22_19_3_amt # 19년 3월 문화취미

#==========================================================================================
# 19년 4월 문화취미관련 정보

store22_amt3 = store22_amt.loc[store22_amt['일자'].apply(lambda x : 20190401 <= x <=  20190430)][['일자','이용건수','이용금액']]
store22_amt3 
store22_amt3 = store22_amt3.reset_index()
del store22_amt3['index']
PN = cul_2019_04['vector'] / cul_2019_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))


vec = pd.DataFrame(vec)

store22_19_4_amt = pd.concat([store22_amt3, vec], ignore_index=True, axis = 1)
store22_19_4_amt = store22_19_4_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store22_19_4_amt = store22_19_4_amt.fillna(0)
store22_19_4_amt # 19년 4월 문화취미


#==========================================================================================
# 19년 5월 문화취미관련 정보

store22_amt4 = store22_amt.loc[store22_amt['일자'].apply(lambda x : 20190501 <= x <=  20190531)][['일자','이용건수','이용금액']]
store22_amt4
store22_amt4 = store22_amt4.reset_index()
del store22_amt4['index']
PN = cul_2019_05['vector'] / cul_2019_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))
    elif i == PN[9]:
        vec.append('-{}'.format(PN[9]))


vec = pd.DataFrame(vec)

store22_19_5_amt = pd.concat([store22_amt4, vec], ignore_index=True, axis = 1)
store22_19_5_amt = store22_19_5_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store22_19_5_amt = store22_19_5_amt.fillna(0)
store22_19_5_amt # 19년 5월 문화취미


#==========================================================================================
# 20년 2월 문화취미관련 정보

store22_amt1 = store22_amt.loc[store22_amt['일자'].apply(lambda x : 20200201 <= x <=  20200228)][['일자','이용건수','이용금액']]
store22_amt1
store22_amt1 = store22_amt1.reset_index()
del store22_amt1['index']
store22_amt1
PN = cul_2020_02['vector'] / cul_2020_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))


vec = pd.DataFrame(vec)

store22_20_2_amt = pd.concat([store22_amt1, vec], ignore_index=True, axis = 1)
store22_20_2_amt = store22_20_2_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store22_20_2_amt = store22_20_2_amt.fillna(0)
store22_20_2_amt # 20년 2월 문화취미


#==========================================================================================
# 20년 3월 문화취미관련 정보

store22_amt2 = store22_amt.loc[store22_amt['일자'].apply(lambda x : 20200301 <= x <=  20200331)][['일자','이용건수','이용금액']]
store22_amt2
store22_amt2 = store22_amt2.reset_index()
del store22_amt2['index']
PN = cul_2020_03['vector'] / cul_2020_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('+{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))
    elif i == PN[9]:
        vec.append('+{}'.format(PN[9]))
    elif i == PN[10]:
        vec.append('+{}'.format(PN[10]))

vec = pd.DataFrame(vec)

store22_20_3_amt = pd.concat([store22_amt2, vec], ignore_index=True, axis = 1)
store22_20_3_amt = store22_20_3_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store22_20_3_amt = store22_20_3_amt.fillna(0)
store22_20_3_amt # 20년 3월 문화취미

#==========================================================================================
# 20년 4월 문화취미관련 정보

store22_amt3 = store22_amt.loc[store22_amt['일자'].apply(lambda x : 20200401 <= x <=  20200430)][['일자','이용건수','이용금액']]
store22_amt3
store22_amt3 = store22_amt3.reset_index()
del store22_amt3['index']
PN = cul_2020_04['vector'] / cul_2020_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('+{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))
    elif i == PN[9]:
        vec.append('+{}'.format(PN[9]))
    elif i == PN[10]:
        vec.append('+{}'.format(PN[10]))
    elif i == PN[11]:
        vec.append('-{}'.format(PN[11]))
    elif i == PN[12]:
        vec.append('+{}'.format(PN[12]))
    elif i == PN[13]:
        vec.append('+{}'.format(PN[13]))
    elif i == PN[14]:
        vec.append('+{}'.format(PN[14]))


vec = pd.DataFrame(vec)

store22_20_4_amt = pd.concat([store22_amt3, vec], ignore_index=True, axis = 1)
store22_20_4_amt = store22_20_4_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store22_20_4_amt = store22_20_4_amt.fillna(0)
store22_20_4_amt # 20년 4월 문화취미

#==========================================================================================
# 20년 5월 문화취미관련 정보

store22_amt4 = store22_amt.loc[store22_amt['일자'].apply(lambda x : 20200501 <= x <=  20200531)][['일자','이용건수','이용금액']]
store22_amt4
store22_amt4 = store22_amt4.reset_index()
del store22_amt4['index']
PN = cul_2020_05['vector'] / cul_2020_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))



vec = pd.DataFrame(vec)

store22_20_5_amt = pd.concat([store22_amt4, vec], ignore_index=True, axis = 1)
store22_20_5_amt = store22_20_5_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store22_20_5_amt = store22_20_5_amt.fillna(0)
store22_20_5_amt # 20년 5월 문화취미


#==========================================================================================
# 19년 2월 푸드관련 정보

store80_81_amt1 = store80_81_amt.loc[store80_81_amt['일자'].apply(lambda x : 20190201 <= x <=  20190228)][['일자','이용건수','이용금액']]
store80_81_amt1
store80_81_amt1 = store80_81_amt1.reset_index()
del store80_81_amt1['index']
store80_81_amt1
PN = food_2019_02['vector'] / food_2019_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))


vec = pd.DataFrame(vec)

store80_81_19_2_amt = pd.concat([store80_81_amt1, vec], ignore_index=True, axis = 1)
store80_81_19_2_amt = store80_81_19_2_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store80_81_19_2_amt = store80_81_19_2_amt.fillna(0)
store80_81_19_2_amt # 19년 2월 푸드

#==========================================================================================
# 19년 3월 푸드관련 정보

store80_81_amt2 = store80_81_amt.loc[store80_81_amt['일자'].apply(lambda x : 20190301 <= x <=  20190331)][['일자','이용건수','이용금액']]
store80_81_amt2
store80_81_amt2 = store80_81_amt2.reset_index()
del store80_81_amt2['index']

PN = food_2019_03['vector'] / food_2019_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))


vec = pd.DataFrame(vec)

store80_81_19_3_amt = pd.concat([store80_81_amt2, vec], ignore_index=True, axis = 1)
store80_81_19_3_amt = store80_81_19_3_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store80_81_19_3_amt = store80_81_19_3_amt.fillna(0)
store80_81_19_3_amt # 19년 3월 푸드

#==========================================================================================
# 19년 4월 푸드관련 정보

store80_81_amt3 = store80_81_amt.loc[store80_81_amt['일자'].apply(lambda x : 20190401 <= x <=  20190430)][['일자','이용건수','이용금액']]
store80_81_amt3
store80_81_amt3 = store80_81_amt3.reset_index()
del store80_81_amt3['index']

PN = food_2019_04['vector'] / food_2019_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))

vec = pd.DataFrame(vec)

store80_81_19_4_amt = pd.concat([store80_81_amt3, vec], ignore_index=True, axis = 1)
store80_81_19_4_amt = store80_81_19_4_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store80_81_19_4_amt = store80_81_19_4_amt.fillna(0)
store80_81_19_4_amt # 19년 4월 푸드

#==========================================================================================
# 19년 5월 푸드관련 정보

store80_81_amt4 = store80_81_amt.loc[store80_81_amt['일자'].apply(lambda x : 20190501 <= x <=  20190531)][['일자','이용건수','이용금액']]
store80_81_amt4
store80_81_amt4 = store80_81_amt4.reset_index()
del store80_81_amt4['index']

PN = food_2019_05['vector'] / food_2019_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('+{}'.format(PN[8]))

vec = pd.DataFrame(vec)

store80_81_19_5_amt = pd.concat([store80_81_amt4, vec], ignore_index=True, axis = 1)
store80_81_19_5_amt = store80_81_19_5_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store80_81_19_5_amt = store80_81_19_5_amt.fillna(0)
store80_81_19_5_amt # 19년 5월 푸드

#==========================================================================================
# 20년 2월 푸드관련 정보

store80_81_amt5 = store80_81_amt.loc[store80_81_amt['일자'].apply(lambda x : 20200201 <= x <=  20200228)][['일자','이용건수','이용금액']]
store80_81_amt5
store80_81_amt5 = store80_81_amt5.reset_index()
del store80_81_amt5['index']

PN = food_2020_02['vector'] / food_2020_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('+{}'.format(PN[8]))
    elif i == PN[9]:
        vec.append('+{}'.format(PN[9]))

vec = pd.DataFrame(vec)

store80_81_20_2_amt = pd.concat([store80_81_amt5, vec], ignore_index=True, axis = 1)
store80_81_20_2_amt = store80_81_20_2_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store80_81_20_2_amt = store80_81_20_2_amt.fillna(0)
store80_81_20_2_amt # 20년 2월 푸드

#==========================================================================================
# 20년 3월 푸드관련 정보

store80_81_amt6 = store80_81_amt.loc[store80_81_amt['일자'].apply(lambda x : 20200301 <= x <=  20200331)][['일자','이용건수','이용금액']]
store80_81_amt6
store80_81_amt6 = store80_81_amt6.reset_index()
del store80_81_amt6['index']

PN = food_2020_03['vector'] / food_2020_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))

vec = pd.DataFrame(vec)

store80_81_20_3_amt = pd.concat([store80_81_amt6, vec], ignore_index=True, axis = 1)
store80_81_20_3_amt = store80_81_20_3_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store80_81_20_3_amt = store80_81_20_3_amt.fillna(0)
store80_81_20_3_amt # 20년 3월 푸드

#==========================================================================================
# 20년 4월 푸드관련 정보

store80_81_amt7 = store80_81_amt.loc[store80_81_amt['일자'].apply(lambda x : 20200401 <= x <=  20200430)][['일자','이용건수','이용금액']]
store80_81_amt7
store80_81_amt7 = store80_81_amt7.reset_index()
del store80_81_amt7['index']

PN = food_2020_04['vector'] / food_2020_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))

vec = pd.DataFrame(vec)

store80_81_20_4_amt = pd.concat([store80_81_amt7, vec], ignore_index=True, axis = 1)
store80_81_20_4_amt = store80_81_20_4_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store80_81_20_4_amt = store80_81_20_4_amt.fillna(0)
store80_81_20_4_amt # 20년 4월 푸드

#==========================================================================================
# 20년 5월 푸드관련 정보

store80_81_amt8 = store80_81_amt.loc[store80_81_amt['일자'].apply(lambda x : 20200501 <= x <=  20200531)][['일자','이용건수','이용금액']]
store80_81_amt8
store80_81_amt8 = store80_81_amt8.reset_index()
del store80_81_amt8['index']

PN = food_2020_05['vector'] / food_2020_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))

vec = pd.DataFrame(vec)

store80_81_20_5_amt = pd.concat([store80_81_amt8, vec], ignore_index=True, axis = 1)
store80_81_20_5_amt = store80_81_20_5_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store80_81_20_5_amt = store80_81_20_5_amt.fillna(0)
store80_81_20_5_amt # 20년 5월 푸드

#==========================================================================================
# 19년 2월 의료기관 관련 정보
store70_amt
store70_amt1 = store70_amt.loc[store70_amt['일자'].apply(lambda x : 20190201 <= x <=  20190228)][['일자','이용건수','이용금액']]
store70_amt1
store70_amt1 = store70_amt1.reset_index()
del store70_amt1['index']
store70_amt1
PN = medi_2019_02['vector'] / medi_2019_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))

vec = pd.DataFrame(vec)

store70_19_2_amt = pd.concat([store70_amt1, vec], ignore_index=True, axis = 1)
store70_19_2_amt = store70_19_2_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store70_19_2_amt = store70_19_2_amt.fillna(0)
store70_19_2_amt # 19년 2월 의료기관

#==========================================================================================
# 19년 3월 의료기관 관련 정보

store70_amt2 = store70_amt.loc[store70_amt['일자'].apply(lambda x : 20190301 <= x <=  20190331)][['일자','이용건수','이용금액']]
store70_amt2
store70_amt2 = store70_amt2.reset_index()
del store70_amt2['index']
store70_amt2
PN = medi_2019_03['vector'] / medi_2019_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))

vec = pd.DataFrame(vec)

store70_19_3_amt = pd.concat([store70_amt2, vec], ignore_index=True, axis = 1)
store70_19_3_amt = store70_19_3_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store70_19_3_amt = store70_19_3_amt.fillna(0)
store70_19_3_amt # 19년 3월 의료기관


#==========================================================================================
# 19년 4월 의료기관 관련 정보

store70_amt3 = store70_amt.loc[store70_amt['일자'].apply(lambda x : 20190401 <= x <=  20190430)][['일자','이용건수','이용금액']]
store70_amt3
store70_amt3 = store70_amt3.reset_index()
del store70_amt3['index']
store70_amt3
PN = medi_2019_04['vector'] / medi_2019_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))

vec = pd.DataFrame(vec)

store70_19_4_amt = pd.concat([store70_amt3, vec], ignore_index=True, axis = 1)
store70_19_4_amt = store70_19_4_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store70_19_4_amt = store70_19_4_amt.fillna(0)
store70_19_4_amt # 19년 4월 의료기관

#==========================================================================================
# 19년 5월 의료기관 관련 정보

store70_amt4 = store70_amt.loc[store70_amt['일자'].apply(lambda x : 20190501 <= x <=  20190531)][['일자','이용건수','이용금액']]
store70_amt4
store70_amt4 = store70_amt4.reset_index()
del store70_amt4['index']
store70_amt4
PN = medi_2019_05['vector'] / medi_2019_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))

vec = pd.DataFrame(vec)

store70_19_5_amt = pd.concat([store70_amt4, vec], ignore_index=True, axis = 1)
store70_19_5_amt = store70_19_5_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store70_19_5_amt = store70_19_5_amt.fillna(0)
store70_19_5_amt # 19년 5월 의료기관

#==========================================================================================
# 20년 2월 의료기관 관련 정보

store70_amt5 = store70_amt.loc[store70_amt['일자'].apply(lambda x : 20200201 <= x <=  20200228)][['일자','이용건수','이용금액']]
store70_amt5
store70_amt5 = store70_amt5.reset_index()
del store70_amt5['index']
store70_amt5
PN = medi_2020_02['vector'] / medi_2020_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('+{}'.format(PN[7]))

vec = pd.DataFrame(vec)

store70_20_2_amt = pd.concat([store70_amt5, vec], ignore_index=True, axis = 1)
store70_20_2_amt = store70_20_2_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store70_20_2_amt = store70_20_2_amt.fillna(0)
store70_20_2_amt # 20년 2월 의료기관

#==========================================================================================
# 20년 3월 의료기관 관련 정보

store70_amt6 = store70_amt.loc[store70_amt['일자'].apply(lambda x : 20200301 <= x <=  20200331)][['일자','이용건수','이용금액']]
store70_amt6
store70_amt6 = store70_amt6.reset_index()
del store70_amt6['index']
store70_amt6
PN = medi_2020_03['vector'] / medi_2020_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))

vec = pd.DataFrame(vec)

store70_20_3_amt = pd.concat([store70_amt6, vec], ignore_index=True, axis = 1)
store70_20_3_amt = store70_20_3_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store70_20_3_amt = store70_20_3_amt.fillna(0)
store70_20_3_amt # 20년 3월 의료기관

#==========================================================================================
# 20년 4월 의료기관 관련 정보

store70_amt7 = store70_amt.loc[store70_amt['일자'].apply(lambda x : 20200401 <= x <=  20200430)][['일자','이용건수','이용금액']]
store70_amt7
store70_amt7 = store70_amt7.reset_index()
del store70_amt7['index']
store70_amt7
PN = medi_2020_04['vector'] / medi_2020_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('+{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('+{}'.format(PN[8]))
    elif i == PN[9]:
        vec.append('-{}'.format(PN[9]))
    elif i == PN[10]:
        vec.append('-{}'.format(PN[10]))

vec = pd.DataFrame(vec)

store70_20_4_amt = pd.concat([store70_amt7, vec], ignore_index=True, axis = 1)
store70_20_4_amt = store70_20_4_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store70_20_4_amt = store70_20_4_amt.fillna(0)
store70_20_4_amt # 20년 4월 의료기관

#==========================================================================================
# 20년 5월 의료기관 관련 정보

store70_amt8 = store70_amt.loc[store70_amt['일자'].apply(lambda x : 20200501 <= x <=  20200531)][['일자','이용건수','이용금액']]
store70_amt8
store70_amt8 = store70_amt8.reset_index()
del store70_amt8['index']
store70_amt8
PN = medi_2020_05['vector'] / medi_2020_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('+{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('+{}'.format(PN[8]))
    elif i == PN[9]:
        vec.append('-{}'.format(PN[9]))

vec = pd.DataFrame(vec)

store70_20_5_amt = pd.concat([store70_amt8, vec], ignore_index=True, axis = 1)
store70_20_5_amt = store70_20_5_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store70_20_5_amt = store70_20_5_amt.fillna(0)
store70_20_5_amt # 20년 5월 의료기관

#==========================================================================================
# 19년 2월 보건위생 관련 정보
store71_amt
store71_amt1 = store71_amt.loc[store71_amt['일자'].apply(lambda x : 20190201 <= x <=  20190228)][['일자','이용건수','이용금액']]
store71_amt1
store71_amt1 = store71_amt1.reset_index()
del store71_amt1['index']
store71_amt1
PN = health_2019_02['vector'] / health_2019_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))

vec = pd.DataFrame(vec)

store71_19_2_amt = pd.concat([store71_amt1, vec], ignore_index=True, axis = 1)
store71_19_2_amt = store71_19_2_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store71_19_2_amt = store71_19_2_amt.fillna(0)
store71_19_2_amt # 19년 2월 보건위생

#==========================================================================================
# 19년 3월 보건위생 관련 정보
store71_amt
store71_amt2 = store71_amt.loc[store71_amt['일자'].apply(lambda x :20190301 <= x <=  20190331)][['일자','이용건수','이용금액']]
store71_amt2
store71_amt2 = store71_amt2.reset_index()
del store71_amt2['index']
store71_amt2
PN = health_2019_03['vector'] / health_2019_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))

vec = pd.DataFrame(vec)

store71_19_3_amt = pd.concat([store71_amt2, vec], ignore_index=True, axis = 1)
store71_19_3_amt = store71_19_3_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store71_19_3_amt = store71_19_3_amt.fillna(0)
store71_19_3_amt # 19년 3월 보건위생

#==========================================================================================
# 19년 4월 보건위생 관련 정보
store71_amt
store71_amt3 = store71_amt.loc[store71_amt['일자'].apply(lambda x : 20190401 <= x <=  20190430)][['일자','이용건수','이용금액']]
store71_amt3
store71_amt3 = store71_amt3.reset_index()
del store71_amt3['index']
store71_amt3
PN = health_2019_04['vector'] / health_2019_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))

vec = pd.DataFrame(vec)

store71_19_4_amt = pd.concat([store71_amt3, vec], ignore_index=True, axis = 1)
store71_19_4_amt = store71_19_4_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store71_19_4_amt = store71_19_4_amt.fillna(0)
store71_19_4_amt # 19년 4월 보건위생

#==========================================================================================
# 19년 5월 보건위생 관련 정보

store71_amt4 = store71_amt.loc[store71_amt['일자'].apply(lambda x : 20190501 <= x <=  20190531)][['일자','이용건수','이용금액']]
store71_amt4
store71_amt4 = store71_amt4.reset_index()
del store71_amt4['index']
store71_amt4
PN = health_2019_05['vector'] / health_2019_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('+{}'.format(PN[7]))

vec = pd.DataFrame(vec)

store71_19_5_amt = pd.concat([store71_amt4, vec], ignore_index=True, axis = 1)
store71_19_5_amt = store71_19_5_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store71_19_5_amt = store71_19_5_amt.fillna(0)
store71_19_5_amt # 19년 5월 보건위생

#==========================================================================================
# 20년 2월 보건위생 관련 정보

store71_amt5 = store71_amt.loc[store71_amt['일자'].apply(lambda x : 20200201 <= x <=  20200228)][['일자','이용건수','이용금액']]
store71_amt5
store71_amt5 = store71_amt5.reset_index()
del store71_amt5['index']
store71_amt5
PN = health_2020_02['vector'] / health_2020_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))

vec = pd.DataFrame(vec)

store71_20_2_amt = pd.concat([store71_amt5, vec], ignore_index=True, axis = 1)
store71_20_2_amt = store71_20_2_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store71_20_2_amt = store71_20_2_amt.fillna(0)
store71_20_2_amt # 20년 2월 보건위생

#==========================================================================================
# 20년 3월 보건위생 관련 정보

store71_amt6 = store71_amt.loc[store71_amt['일자'].apply(lambda x : 20200301 <= x <=  20200331)][['일자','이용건수','이용금액']]
store71_amt6
store71_amt6 = store71_amt6.reset_index()
del store71_amt6['index']
store71_amt6
PN = health_2020_03['vector'] / health_2020_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))

vec = pd.DataFrame(vec)

store71_20_3_amt = pd.concat([store71_amt6, vec], ignore_index=True, axis = 1)
store71_20_3_amt = store71_20_3_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store71_20_3_amt = store71_20_3_amt.fillna(0)
store71_20_3_amt # 20년 3월 보건위생

#==========================================================================================
# 20년 4월 보건위생 관련 정보

store71_amt7 = store71_amt.loc[store71_amt['일자'].apply(lambda x : 20200401 <= x <=  20200430)][['일자','이용건수','이용금액']]
store71_amt7
store71_amt7 = store71_amt7.reset_index()
del store71_amt7['index']
store71_amt7
PN = health_2020_04['vector'] / health_2020_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))

vec = pd.DataFrame(vec)

store71_20_4_amt = pd.concat([store71_amt7, vec], ignore_index=True, axis = 1)
store71_20_4_amt = store71_20_4_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store71_20_4_amt = store71_20_4_amt.fillna(0)
store71_20_4_amt # 20년 4월 보건위생

#==========================================================================================
# 20년 5월 보건위생 관련 정보

store71_amt8 = store71_amt.loc[store71_amt['일자'].apply(lambda x :20200501 <= x <=  20200531)][['일자','이용건수','이용금액']]
store71_amt8
store71_amt8 = store71_amt8.reset_index()
del store71_amt8['index']
store71_amt8
PN = health_2020_05['vector'] / health_2020_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))

vec = pd.DataFrame(vec)

store71_20_5_amt = pd.concat([store71_amt8, vec], ignore_index=True, axis = 1)
store71_20_5_amt = store71_20_5_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store71_20_5_amt = store71_20_5_amt.fillna(0)
store71_20_5_amt # 20년 5월 보건위생

#==========================================================================================
# 19년 2월 레저 관련 정보

store20_21_amt
store20_21_amt1 = store20_21_amt.loc[store20_21_amt['일자'].apply(lambda x : 20190201 <= x <=  20190228)][['일자','이용건수','이용금액']]
store20_21_amt1
store20_21_amt1 = store20_21_amt1.reset_index()
del store20_21_amt1['index']
store20_21_amt1
PN = leisure_2019_02['vector'] / leisure_2019_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))

vec = pd.DataFrame(vec)

store20_21_19_2_amt = pd.concat([store20_21_amt1, vec], ignore_index=True, axis = 1)
store20_21_19_2_amt = store20_21_19_2_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store20_21_19_2_amt = store20_21_19_2_amt.fillna(0)
store20_21_19_2_amt # 19년 2월 레저

#==========================================================================================
# 19년 3월 레저 관련 정보

store20_21_amt
store20_21_amt2 = store20_21_amt.loc[store20_21_amt['일자'].apply(lambda x : 20190301 <= x <=  20190331)][['일자','이용건수','이용금액']]
store20_21_amt2
store20_21_amt2 = store20_21_amt2.reset_index()
del store20_21_amt2['index']
store20_21_amt2
PN = leisure_2019_03['vector'] / leisure_2019_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))

vec = pd.DataFrame(vec)

store20_21_19_3_amt = pd.concat([store20_21_amt2, vec], ignore_index=True, axis = 1)
store20_21_19_3_amt = store20_21_19_3_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store20_21_19_3_amt = store20_21_19_3_amt.fillna(0)
store20_21_19_3_amt # 19년 3월 레저

#==========================================================================================
# 19년 4월 레저 관련 정보

store20_21_amt
store20_21_amt3 = store20_21_amt.loc[store20_21_amt['일자'].apply(lambda x : 20190401 <= x <=  20190430)][['일자','이용건수','이용금액']]
store20_21_amt3
store20_21_amt3 = store20_21_amt3.reset_index()
del store20_21_amt3['index']
store20_21_amt3
PN = leisure_2019_04['vector'] / leisure_2019_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
        
vec = pd.DataFrame(vec)

store20_21_19_4_amt = pd.concat([store20_21_amt3, vec], ignore_index=True, axis = 1)
store20_21_19_4_amt = store20_21_19_4_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store20_21_19_4_amt = store20_21_19_4_amt.fillna(0)
store20_21_19_4_amt # 19년 4월 레저

#==========================================================================================
# 19년 5월 레저 관련 정보

store20_21_amt
store20_21_amt4 = store20_21_amt.loc[store20_21_amt['일자'].apply(lambda x : 20190501 <= x <=  20190531)][['일자','이용건수','이용금액']]
store20_21_amt4
store20_21_amt4 = store20_21_amt4.reset_index()
del store20_21_amt4['index']
store20_21_amt4
PN = leisure_2019_05['vector'] / leisure_2019_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
        
vec = pd.DataFrame(vec)

store20_21_19_5_amt = pd.concat([store20_21_amt4, vec], ignore_index=True, axis = 1)
store20_21_19_5_amt = store20_21_19_5_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store20_21_19_5_amt = store20_21_19_5_amt.fillna(0)
store20_21_19_5_amt # 19년 5월 레저

#==========================================================================================
# 20년 2월 레저 관련 정보

store20_21_amt
store20_21_amt5 = store20_21_amt.loc[store20_21_amt['일자'].apply(lambda x : 20200201 <= x <=  20200228)][['일자','이용건수','이용금액']]
store20_21_amt5
store20_21_amt5 = store20_21_amt5.reset_index()
del store20_21_amt5['index']
store20_21_amt5
PN = leisure_2020_02['vector'] / leisure_2020_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
        
vec = pd.DataFrame(vec)

store20_21_20_2_amt = pd.concat([store20_21_amt5, vec], ignore_index=True, axis = 1)
store20_21_20_2_amt = store20_21_20_2_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store20_21_20_2_amt = store20_21_20_2_amt.fillna(0)
store20_21_20_2_amt # 20년 2월 레저

#==========================================================================================
# 20년 3월 레저 관련 정보

store20_21_amt
store20_21_amt6 = store20_21_amt.loc[store20_21_amt['일자'].apply(lambda x : 20200301 <= x <=  20200331)][['일자','이용건수','이용금액']]
store20_21_amt6
store20_21_amt6 = store20_21_amt6.reset_index()
del store20_21_amt6['index']
store20_21_amt6
PN = leisure_2020_03['vector'] / leisure_2020_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))

        
vec = pd.DataFrame(vec)

store20_21_20_3_amt = pd.concat([store20_21_amt6, vec], ignore_index=True, axis = 1)
store20_21_20_3_amt = store20_21_20_3_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store20_21_20_3_amt = store20_21_20_3_amt.fillna(0)
store20_21_20_3_amt # 20년 3월 레저


#==========================================================================================
# 20년 4월 레저 관련 정보

store20_21_amt
store20_21_amt7 = store20_21_amt.loc[store20_21_amt['일자'].apply(lambda x : 20200401 <= x <=  20200430)][['일자','이용건수','이용금액']]
store20_21_amt7
store20_21_amt7 = store20_21_amt7.reset_index()
del store20_21_amt7['index']
store20_21_amt7
PN = leisure_2020_04['vector'] / leisure_2020_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
        
vec = pd.DataFrame(vec)

store20_21_20_4_amt = pd.concat([store20_21_amt7, vec], ignore_index=True, axis = 1)
store20_21_20_4_amt = store20_21_20_4_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store20_21_20_4_amt = store20_21_20_4_amt.fillna(0)
store20_21_20_4_amt # 20년 4월 레저

#==========================================================================================
# 20년 5월 레저 관련 정보

store20_21_amt
store20_21_amt8 = store20_21_amt.loc[store20_21_amt['일자'].apply(lambda x : 20200501 <= x <=  20200531)][['일자','이용건수','이용금액']]
store20_21_amt8
store20_21_amt8 = store20_21_amt8.reset_index()
del store20_21_amt8['index']
type(store20_21_amt8)
PN = leisure_2020_05['vector'] / leisure_2020_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
        
vec = pd.DataFrame(vec)

store20_21_20_5_amt = pd.concat([store20_21_amt8, vec], ignore_index=True, axis = 1)
store20_21_20_5_amt = store20_21_20_5_amt.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
store20_21_20_5_amt = store20_21_20_5_amt.fillna(0)
store20_21_20_5_amt # 20년 5월 레저




#===============================================================================================================
#===============================================================================================================



# 물류 데이터

mul = pd.read_excel('c:/big/mul.xlsx')
mul



# 19년 2월 / 도서음반(문화) 송장건수
book_1902_mul = mul.loc[mul['DL_YMD'].apply(lambda x : 190201 <= x <=  190228)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
book_1902_mul = book_1902_mul.loc[book_1902_mul['DL_GD_LCLS_CD'].apply(lambda x : x  == 12)][['DL_YMD','INVC_CONT']]

book_1902_mul1 = book_1902_mul.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
book_1902_mul1 = book_1902_mul1.reset_index()
del book_1902_mul1['index']

PN = cul_2019_02['vector'] / cul_2019_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))
vec = pd.DataFrame(vec)


book1902_amt = pd.concat([book_1902_mul1, vec], ignore_index=True, axis = 1)
book1902_amt = book1902_amt.rename(columns = {0:'일자', 1:'송장건수', 2:'PN'})
book1902_amt = book1902_amt.fillna(0)
book1902_amt # 19년 2월 도서음반



#===================================================================================================


# 19년 3월 / 도서음반(문화) 송장건수
book_1903_mul = mul.loc[mul['DL_YMD'].apply(lambda x : 190301 <= x <=  190331)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
book_1903_mul = book_1903_mul.loc[book_1903_mul['DL_GD_LCLS_CD'].apply(lambda x : x  == 12)][['DL_YMD','INVC_CONT']]
book_1903_mul = book_1903_mul.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
book_1903_mul1 = book_1903_mul.reset_index()
del book_1903_mul1['index']

PN = cul_2019_03['vector'] / cul_2019_03['vector'].count()



vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))


vec = pd.DataFrame(vec)

book1903_amt = pd.concat([book_1903_mul1, vec], ignore_index=True, axis = 1)
book1903_amt = book1903_amt.rename(columns = {0:'일자', 1:'송장건수', 2:'PN'})
book1903_amt = book1903_amt.fillna(0)
book1903_amt # 19년 3월 도서음반

#======================================================================================================


# 19년 4월 / 도서음반(문화) 송장건수
book_1904_mul = mul.loc[mul['DL_YMD'].apply(lambda x : 190401 <= x <=  190430)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
book_1904_mul = book_1904_mul.loc[book_1904_mul['DL_GD_LCLS_CD'].apply(lambda x : x  == 12)][['DL_YMD','INVC_CONT']]
book_1904_mul = book_1904_mul.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
book_1904_mul1 = book_1904_mul.reset_index()
del book_1904_mul1['index']

PN = cul_2019_04['vector'] / cul_2019_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))



vec = pd.DataFrame(vec)

book1904_amt = pd.concat([book_1904_mul1, vec], ignore_index=True, axis = 1)
book1904_amt = book1904_amt.rename(columns = {0:'일자', 1:'송장건수', 2:'PN'})
book1904_amt = book1904_amt.fillna(0)
book1904_amt # 19년 4월 도서음반

#======================================================================================================


# 19년 5월 / 도서음반(문화) 송장건수
book_1905_mul = mul.loc[mul['DL_YMD'].apply(lambda x : 190501 <= x <=  190531)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
book_1905_mul = book_1905_mul.loc[book_1905_mul['DL_GD_LCLS_CD'].apply(lambda x : x  == 12)][['DL_YMD','INVC_CONT']]
book_1905_mul = book_1905_mul.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
book_1905_mul1 = book_1905_mul.reset_index()
del book_1905_mul1['index']

PN = cul_2019_05['vector'] / cul_2019_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))
    elif i == PN[9]:
        vec.append('-{}'.format(PN[9]))



vec = pd.DataFrame(vec)

book1905_amt = pd.concat([book_1905_mul1, vec], ignore_index=True, axis = 1)
book1905_amt = book1905_amt.rename(columns = {0:'일자', 1:'송장건수', 2:'PN'})
book1905_amt = book1905_amt.fillna(0)
book1905_amt # 19년 5월 도서음반


#======================================================================================================


# 20년 2월 / 도서음반(문화) 송장건수
book_2002_mul = mul.loc[mul['DL_YMD'].apply(lambda x : 200201 <= x <=  200228)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
book_2002_mul = book_2002_mul.loc[book_2002_mul['DL_GD_LCLS_CD'].apply(lambda x : x  == 12)][['DL_YMD','INVC_CONT']]
book_2002_mul = book_2002_mul.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
book_2002_mul1 = book_2002_mul.reset_index()
del book_2002_mul1['index']

PN = cul_2020_02['vector'] / cul_2020_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))



vec = pd.DataFrame(vec)

book2002_amt = pd.concat([book_2002_mul1, vec], ignore_index=True, axis = 1)
book2002_amt = book2002_amt.rename(columns = {0:'일자', 1:'송장건수', 2:'PN'})
book2002_amt = book2002_amt.fillna(0)
book2002_amt # 20년 2월 도서음반

#======================================================================================================


# 20년 3월 / 도서음반(문화) 송장건수
book_2003_mul = mul.loc[mul['DL_YMD'].apply(lambda x : 200301 <= x <=  200331)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
book_2003_mul = book_2003_mul.loc[book_2003_mul['DL_GD_LCLS_CD'].apply(lambda x : x  == 12)][['DL_YMD','INVC_CONT']]
book_2003_mul = book_2003_mul.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
book_2003_mul1 = book_2003_mul.reset_index()
del book_2003_mul1['index']

PN = cul_2020_03['vector'] / cul_2020_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('+{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))
    elif i == PN[9]:
        vec.append('+{}'.format(PN[9]))
    elif i == PN[10]:
        vec.append('+{}'.format(PN[10]))


vec = pd.DataFrame(vec)

book2003_amt = pd.concat([book_2003_mul1, vec], ignore_index=True, axis = 1)
book2003_amt = book2003_amt.rename(columns = {0:'일자', 1:'송장건수', 2:'PN'})
book2003_amt = book2003_amt.fillna(0)
book2003_amt # 20년 3월 도서음반


#======================================================================================================


# 20년 4월 / 도서음반(문화) 송장건수
book_2004_mul = mul.loc[mul['DL_YMD'].apply(lambda x : 200401 <= x <=  200430)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
book_2004_mul = book_2004_mul.loc[book_2004_mul['DL_GD_LCLS_CD'].apply(lambda x : x  == 12)][['DL_YMD','INVC_CONT']]
book_2004_mul = book_2004_mul.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
book_2004_mul1 = book_2004_mul.reset_index()
del book_2004_mul1['index']

PN = cul_2020_04['vector'] / cul_2020_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('+{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))
    elif i == PN[9]:
        vec.append('+{}'.format(PN[9]))
    elif i == PN[10]:
        vec.append('+{}'.format(PN[10]))
    elif i == PN[11]:
        vec.append('-{}'.format(PN[11]))
    elif i == PN[12]:
        vec.append('+{}'.format(PN[12]))
    elif i == PN[13]:
        vec.append('+{}'.format(PN[13]))
    elif i == PN[14]:
        vec.append('+{}'.format(PN[14]))

vec = pd.DataFrame(vec)

book2004_amt = pd.concat([book_2004_mul1, vec], ignore_index=True, axis = 1)
book2004_amt = book2004_amt.rename(columns = {0:'일자', 1:'송장건수', 2:'PN'})
book2004_amt = book2004_amt.fillna(0)
book2004_amt # 20년 4월 도서음반


#======================================================================================================


# 20년 5월 / 도서음반(문화) 송장건수
book_2005_mul = mul.loc[mul['DL_YMD'].apply(lambda x : 200501 <= x <=  200531)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
book_2005_mul = book_2005_mul.loc[book_2005_mul['DL_GD_LCLS_CD'].apply(lambda x : x  == 12)][['DL_YMD','INVC_CONT']]
book_2005_mul = book_2005_mul.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
book_2005_mul1 = book_2005_mul.reset_index()
del book_2005_mul1['index']

PN = cul_2020_05['vector'] / cul_2020_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))

vec = pd.DataFrame(vec)

book2005_amt = pd.concat([book_2005_mul1, vec], ignore_index=True, axis = 1)
book2005_amt = book2005_amt.rename(columns = {0:'일자', 1:'송장건수', 2:'PN'})
book2005_amt = book2005_amt.fillna(0)
book2005_amt # 20년 5월 도서음반

#======================================================================================================


# 20년 5월 / 도서음반(문화) 송장건수
book_2005_mul = mul.loc[mul['DL_YMD'].apply(lambda x : 200501 <= x <=  200531)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
book_2005_mul = book_2005_mul.loc[book_2005_mul['DL_GD_LCLS_CD'].apply(lambda x : x  == 12)][['DL_YMD','INVC_CONT']]
book_2005_mul = book_2005_mul.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
book_2005_mul1 = book_2005_mul.reset_index()
del book_2005_mul1['index']

PN = cul_2020_05['vector'] / cul_2020_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))

vec = pd.DataFrame(vec)

book2005_amt = pd.concat([book_2005_mul1, vec], ignore_index=True, axis = 1)
book2005_amt = book2005_amt.rename(columns = {0:'일자', 1:'송장건수', 2:'PN'})
book2005_amt = book2005_amt.fillna(0)
book2005_amt # 20년 5월 도서음반


#======================================================================================================================

# 19년 2월  / 가구(숙박) 송장 건수
gagu1902 = mul.loc[mul['DL_YMD'].apply(lambda x : 190201 <= x <=  190228)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
gagu1902_mul = gagu1902.loc[gagu1902['DL_GD_LCLS_CD'].apply(lambda x : x  == 10)][['DL_YMD','INVC_CONT']]
gagu1902_mul = gagu1902_mul.reset_index()
del gagu1902_mul['index']
PN = stay_2019_02['vector'] / stay_2019_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))

vec = pd.DataFrame(vec)


gagu1902_mul = pd.concat([gagu1902_mul, vec], ignore_index=True, axis = 1)
gagu1902_mul = gagu1902_mul.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
gagu1902_mul = gagu1902_mul.fillna(0)
gagu1902_mul # 19년 2월 가구

#==========================================================================================


# 19년 3월  / 가구(숙박) 송장 건수
gagu1903 = mul.loc[mul['DL_YMD'].apply(lambda x : 190301 <= x <=  190331)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
gagu1903_mul = gagu1903.loc[gagu1903['DL_GD_LCLS_CD'].apply(lambda x : x  == 10)][['DL_YMD','INVC_CONT']]
gagu1903_mul = gagu1903_mul.reset_index()
del gagu1903_mul['index']
PN = stay_2019_03['vector'] / stay_2019_03['vector'].count()



vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))

vec = pd.DataFrame(vec)

type(store10_3_amt)
gagu1903_mul = pd.concat([gagu1903_mul, vec], ignore_index=True, axis = 1)
gagu1903_mul = gagu1903_mul.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
gagu1903_mul = gagu1903_mul.fillna(0)
gagu1903_mul # 19년 3월 가구


#==========================================================================================

# 19년 4월  / 가구(숙박) 송장 건수
gagu1904 = mul.loc[mul['DL_YMD'].apply(lambda x : 190401 <= x <=  190430)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
gagu1904_mul = gagu1904.loc[gagu1904['DL_GD_LCLS_CD'].apply(lambda x : x  == 10)][['DL_YMD','INVC_CONT']]
gagu1904_mul = gagu1904_mul.reset_index()
del gagu1904_mul['index']

PN = stay_2019_04['vector'] / stay_2019_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))

vec = pd.DataFrame(vec)

gagu1904_mul = pd.concat([gagu1904_mul, vec], ignore_index=True, axis = 1)
gagu1904_mul = gagu1904_mul.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
gagu1904_mul = gagu1904_mul.fillna(0)
gagu1904_mul # 19년 4월 가구


#==========================================================================================


# 19년 5월  / 가구(숙박) 송장 건수
gagu1905 = mul.loc[mul['DL_YMD'].apply(lambda x : 190501 <= x <=  190531)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
gagu1905_mul = gagu1905.loc[gagu1905['DL_GD_LCLS_CD'].apply(lambda x : x  == 10)][['DL_YMD','INVC_CONT']]
gagu1905_mul = gagu1905_mul.reset_index()
del gagu1905_mul['index']


PN = stay_2019_05['vector'] / stay_2019_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))

vec = pd.DataFrame(vec)


gagu1905_mul = pd.concat([gagu1905_mul, vec], ignore_index=True, axis = 1)
gagu1905_mul =gagu1905_mul.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
gagu1905_mul = gagu1905_mul.fillna(0)
gagu1905_mul # 19년 5월 가구

#==========================================================================================

# 20년 2월  / 가구(숙박) 송장 건수
gagu2002 = mul.loc[mul['DL_YMD'].apply(lambda x : 200201 <= x <=  200228)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
gagu2002_mul = gagu2002.loc[gagu2002['DL_GD_LCLS_CD'].apply(lambda x : x  == 10)][['DL_YMD','INVC_CONT']]
gagu2002_mul = gagu2002_mul.reset_index()
del gagu2002_mul['index']

PN = stay_2020_02['vector'] / stay_2020_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))


vec = pd.DataFrame(vec)


gagu2002_mul = pd.concat([gagu2002_mul, vec], ignore_index=True, axis = 1)
gagu2002_mul = gagu2002_mul.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
gagu2002_mul = gagu2002_mul.fillna(0)
gagu2002_mul # 20년 2월 가구

#==========================================================================================

# 20년 3월  / 가구(숙박) 송장 건수
gagu2003 = mul.loc[mul['DL_YMD'].apply(lambda x : 200301 <= x <=  200331)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
gagu2003_mul = gagu2003.loc[gagu2003['DL_GD_LCLS_CD'].apply(lambda x : x  == 10)][['DL_YMD','INVC_CONT']]
gagu2003_mul = gagu2003_mul.reset_index()
del gagu2003_mul['index']

PN = stay_2020_03['vector'] / stay_2020_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))

vec = pd.DataFrame(vec)

type(store20_amt1)
gagu2003_mul = pd.concat([gagu2003_mul, vec], ignore_index=True, axis = 1)
gagu2003_mul = gagu2003_mul.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
gagu2003_mul = gagu2003_mul.fillna(0)
gagu2003_mul # 20년 3월 가구

#==========================================================================================

# 20년 4월  / 가구(숙박) 송장 건수
gagu2004 = mul.loc[mul['DL_YMD'].apply(lambda x : 200401 <= x <=  200430)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
gagu2004_mul = gagu2004.loc[gagu2004['DL_GD_LCLS_CD'].apply(lambda x : x  == 10)][['DL_YMD','INVC_CONT']]
gagu2004_mul = gagu2004_mul.reset_index()
del gagu2004_mul['index']

PN = stay_2020_04['vector'] / stay_2020_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))
    elif i == PN[9]:
        vec.append('-{}'.format(PN[9]))


vec = pd.DataFrame(vec)

gagu2004_mul = pd.concat([gagu2004_mul, vec], ignore_index=True, axis = 1)
gagu2004_mul = gagu2004_mul.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
gagu2004_mul = gagu2004_mul.fillna(0)
gagu2004_mul # 20년 4월 가구

#==========================================================================================

# 20년 5월  / 가구(숙박) 송장 건수
gagu2005 = mul.loc[mul['DL_YMD'].apply(lambda x : 200501 <= x <=  200531)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
gagu2005_mul = gagu2005.loc[gagu2005['DL_GD_LCLS_CD'].apply(lambda x : x  == 10)][['DL_YMD','INVC_CONT']]
gagu2005_mul = gagu2005_mul.reset_index()
del gagu2005_mul['index']
PN = stay_2020_05['vector'] / stay_2020_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))


vec = pd.DataFrame(vec)

gagu2005_mul = pd.concat([gagu2005_mul, vec], ignore_index=True, axis = 1)
gagu2005_mul = gagu2005_mul.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
gagu2005_mul = gagu2005_mul.fillna(0)
gagu2005_mul # 20년 5월 가구


#================================================================================================================

# 19년 2월 / 생활건강(보건위생) 송장건수
bo1902 = mul.loc[mul['DL_YMD'].apply(lambda x : 190201 <= x <=  190228)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
bo1902 = bo1902.loc[bo1902['DL_GD_LCLS_CD'].apply(lambda x : x  == 15)][['DL_YMD','INVC_CONT']]
bo1902 = bo1902.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
bo1902 = bo1902.reset_index()
del bo1902['index']

PN = health_2019_02['vector'] / health_2019_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))

vec = pd.DataFrame(vec)

bo1902 = pd.concat([bo1902, vec], ignore_index=True, axis = 1)
bo1902 = bo1902.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
bo1902 = bo1902.fillna(0)
bo1902 # 19년 2월 생활건강

#==========================================================================================

# 19년 3월 / 생활건강(보건위생) 송장건수
bo1903 = mul.loc[mul['DL_YMD'].apply(lambda x : 190301 <= x <=  190331)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
bo1903 = bo1903.loc[bo1903['DL_GD_LCLS_CD'].apply(lambda x : x  == 15)][['DL_YMD','INVC_CONT']]
bo1903 = bo1903.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
bo1903 = bo1903.reset_index()
del bo1903['index']
PN = health_2019_03['vector'] / health_2019_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))

vec = pd.DataFrame(vec)

bo1903 = pd.concat([bo1903, vec], ignore_index=True, axis = 1)
bo1903 = bo1903.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
bo1903 = bo1903.fillna(0)
bo1903 # 19년 3월 생활건강

#==========================================================================================

# 19년 4월 / 생활건강(보건위생) 송장건수
bo1904 = mul.loc[mul['DL_YMD'].apply(lambda x : 190401 <= x <=  190430)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
bo1904 = bo1904.loc[bo1904['DL_GD_LCLS_CD'].apply(lambda x : x  == 15)][['DL_YMD','INVC_CONT']]
bo1904 = bo1904.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
bo1904 = bo1904.reset_index()
del bo1904['index']

PN = health_2019_04['vector'] / health_2019_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))

vec = pd.DataFrame(vec)

bo1904 = pd.concat([bo1904, vec], ignore_index=True, axis = 1)
bo1904 = bo1904.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
bo1904 = bo1904.fillna(0)
bo1904 # 19년 4월 생활건강

#==========================================================================================

# 19년 5월 / 생활건강(보건위생) 송장건수
bo1905 = mul.loc[mul['DL_YMD'].apply(lambda x : 190501 <= x <=  190531)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
bo1905 = bo1905.loc[bo1905['DL_GD_LCLS_CD'].apply(lambda x : x  == 15)][['DL_YMD','INVC_CONT']]
bo1905 = bo1905.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
bo1905 = bo1905.reset_index()
del bo1905['index']

PN = health_2019_05['vector'] / health_2019_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('+{}'.format(PN[7]))

vec = pd.DataFrame(vec)

bo1905 = pd.concat([bo1905, vec], ignore_index=True, axis = 1)
bo1905 = bo1905.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
bo1905 = bo1905.fillna(0)
bo1905 # 19년 5월 생활건강

#==========================================================================================

# 20년 2월 / 생활건강(보건위생) 송장건수
bo2002 = mul.loc[mul['DL_YMD'].apply(lambda x : 200201 <= x <=  200228)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
bo2002 = bo2002.loc[bo2002['DL_GD_LCLS_CD'].apply(lambda x : x  == 15)][['DL_YMD','INVC_CONT']]
bo2002 = bo2002.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
bo2002 = bo2002.reset_index()
del bo2002['index']

PN = health_2020_02['vector'] / health_2020_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))

vec = pd.DataFrame(vec)

bo2002 = pd.concat([bo2002, vec], ignore_index=True, axis = 1)
bo2002 = bo2002.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
bo2002 = bo2002.fillna(0)
bo2002 # 20년 2월 생활건강

#==========================================================================================

# 20년 3월 / 생활건강(보건위생) 송장건수
bo2003 = mul.loc[mul['DL_YMD'].apply(lambda x : 200301 <= x <=  200331)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
bo2003 = bo2003.loc[bo2003['DL_GD_LCLS_CD'].apply(lambda x : x  == 15)][['DL_YMD','INVC_CONT']]
bo2003 = bo2003.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
bo2003 = bo2003.reset_index()
del bo2003['index']

PN = health_2020_03['vector'] / health_2020_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))

vec = pd.DataFrame(vec)

bo2003 = pd.concat([bo2003, vec], ignore_index=True, axis = 1)
bo2003 = bo2003.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
bo2003 = bo2003.fillna(0)
bo2003 # 20년 3월 생활건강

#==========================================================================================

# 20년 4월 / 생활건강(보건위생) 송장건수
bo2004 = mul.loc[mul['DL_YMD'].apply(lambda x : 200401 <= x <=  200430)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
bo2004 = bo2004.loc[bo2004['DL_GD_LCLS_CD'].apply(lambda x : x  == 15)][['DL_YMD','INVC_CONT']]
bo2004 = bo2004.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
bo2004 = bo2004.reset_index()
del bo2004['index']


PN = health_2020_04['vector'] / health_2020_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))

vec = pd.DataFrame(vec)

bo2004 = pd.concat([bo2004, vec], ignore_index=True, axis = 1)
bo2004 = bo2004.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
bo2004 = bo2004.fillna(0)
bo2004 # 20년 4월 생활건강

#==========================================================================================

# 20년 5월 / 생활건강(보건위생) 송장건수
bo2005 = mul.loc[mul['DL_YMD'].apply(lambda x : 200501 <= x <=  200531)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
bo2005 = bo2005.loc[bo2005['DL_GD_LCLS_CD'].apply(lambda x : x  == 15)][['DL_YMD','INVC_CONT']]
bo2005 = bo2005.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
bo2005 = bo2005.reset_index()
del bo2005['index']

PN = health_2020_05['vector'] / health_2020_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))

vec = pd.DataFrame(vec)

bo2005 = pd.concat([bo2005, vec], ignore_index=True, axis = 1)
bo2005 = bo2005.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
bo2005 = bo2005.fillna(0)
bo2005 # 20년 5월 생활건강


#=====================================================================================================

# 19년 2월 / 스포츠, 레저(레저) 송장건수
sports1902 = mul.loc[mul['DL_YMD'].apply(lambda x : 190201 <= x <=  190228)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
sports1902 = sports1902.loc[sports1902['DL_GD_LCLS_CD'].apply(lambda x : x  == 16)][['DL_YMD','INVC_CONT']]
sports1902 = sports1902.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
sports1902 = sports1902.reset_index()
del sports1902['index']

PN = leisure_2019_02['vector'] / leisure_2019_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))

vec = pd.DataFrame(vec)

sports1902 = pd.concat([sports1902, vec], ignore_index=True, axis = 1)
sports1902 = sports1902.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
sports1902 = sports1902.fillna(0)
sports1902 # 19년 2월 스포츠, 레저

#==========================================================================================

# 19년 3월 / 스포츠, 레저(레저) 송장건수
sports1903 = mul.loc[mul['DL_YMD'].apply(lambda x : 190301 <= x <=  190331)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
sports1903 = sports1903.loc[sports1903['DL_GD_LCLS_CD'].apply(lambda x : x  == 16)][['DL_YMD','INVC_CONT']]
sports1903 = sports1903.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
sports1903 = sports1903.reset_index()
del sports1903['index']

PN = leisure_2019_03['vector'] / leisure_2019_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))

vec = pd.DataFrame(vec)

sports1903 = pd.concat([sports1903, vec], ignore_index=True, axis = 1)
sports1903 = sports1903.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
sports1903 = sports1903.fillna(0)
sports1903 # 19년 3월 스포츠, 레저

#==========================================================================================

# 19년 4월 / 스포츠, 레저(레저) 송장건수
sports1904 = mul.loc[mul['DL_YMD'].apply(lambda x : 190401 <= x <=  190430)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
sports1904 = sports1904.loc[sports1904['DL_GD_LCLS_CD'].apply(lambda x : x  == 16)][['DL_YMD','INVC_CONT']]
sports1904 = sports1904.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
sports1904 = sports1904.reset_index()
del sports1904['index']

PN = leisure_2019_04['vector'] / leisure_2019_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
        
vec = pd.DataFrame(vec)

sports1904 = pd.concat([sports1904, vec], ignore_index=True, axis = 1)
sports1904 = sports1904.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
sports1904 = sports1904.fillna(0)
sports1904 # 19년 4월 스포츠, 레저

#==========================================================================================

# 19년 5월 / 스포츠, 레저(레저) 송장건수
sports1905 = mul.loc[mul['DL_YMD'].apply(lambda x : 190501 <= x <=  190531)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
sports1905 = sports1905.loc[sports1905['DL_GD_LCLS_CD'].apply(lambda x : x  == 16)][['DL_YMD','INVC_CONT']]
sports1905 = sports1905.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
sports1905 = sports1905.reset_index()
del sports1905['index']

PN = leisure_2019_05['vector'] / leisure_2019_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
        
vec = pd.DataFrame(vec)

sports1905 = pd.concat([sports1905, vec], ignore_index=True, axis = 1)
sports1905 = sports1905.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
sports1905 = sports1905.fillna(0)
sports1905 # 19년 5월 스포츠, 레저

#==========================================================================================

# 20년 2월 / 스포츠, 레저(레저) 송장건수
sports2002 = mul.loc[mul['DL_YMD'].apply(lambda x : 200201 <= x <=  200228)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
sports2002 = sports2002.loc[sports2002['DL_GD_LCLS_CD'].apply(lambda x : x  == 16)][['DL_YMD','INVC_CONT']]
sports2002 = sports2002.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
sports2002 = sports2002.reset_index()
del sports2002['index']

PN = leisure_2020_02['vector'] / leisure_2020_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
        
vec = pd.DataFrame(vec)

sports2002 = pd.concat([sports2002, vec], ignore_index=True, axis = 1)
sports2002 = sports2002.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
sports2002 = sports2002.fillna(0)
sports2002 # 20년 2월 스포츠, 레저

#==========================================================================================

# 20년 3월 / 스포츠, 레저(레저) 송장건수
sports2003 = mul.loc[mul['DL_YMD'].apply(lambda x : 200301 <= x <=  200331)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
sports2003 = sports2003.loc[sports2003['DL_GD_LCLS_CD'].apply(lambda x : x  == 16)][['DL_YMD','INVC_CONT']]
sports2003 = sports2003.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
sports2003 = sports2003.reset_index()
del sports2003['index']

PN = leisure_2020_03['vector'] / leisure_2020_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))

        
vec = pd.DataFrame(vec)

sports2003 = pd.concat([sports2003, vec], ignore_index=True, axis = 1)
sports2003 = sports2003.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
sports2003 = sports2003.fillna(0)
sports2003 # 20년 3월 스포츠, 레저


#==========================================================================================


# 20년 4월 / 스포츠, 레저(레저) 송장건수
sports2004 = mul.loc[mul['DL_YMD'].apply(lambda x : 200401 <= x <=  200430)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
sports2004 = sports2004.loc[sports2004['DL_GD_LCLS_CD'].apply(lambda x : x  == 16)][['DL_YMD','INVC_CONT']]
sports2004 = sports2004.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
sports2004 = sports2004.reset_index()
del sports2004['index']

PN = leisure_2020_04['vector'] / leisure_2020_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
        
vec = pd.DataFrame(vec)

sports2004 = pd.concat([sports2004, vec], ignore_index=True, axis = 1)
sports2004 = sports2004.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
sports2004 = sports2004.fillna(0)
sports2004 # 20년 4월 스포츠, 레저

#==========================================================================================

# 20년 5월 / 스포츠, 레저(레저) 송장건수
sports2005 = mul.loc[mul['DL_YMD'].apply(lambda x : 200501 <= x <=  200531)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
sports2005 = sports2005.loc[sports2005['DL_GD_LCLS_CD'].apply(lambda x : x  == 16)][['DL_YMD','INVC_CONT']]
sports2005 = sports2005.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
sports2005 = sports2005.reset_index()
del sports2005['index']

PN = leisure_2020_05['vector'] / leisure_2020_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
        
vec = pd.DataFrame(vec)

sports2005 = pd.concat([sports2005, vec], ignore_index=True, axis = 1)
sports2005 = sports2005.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
sports2005 = sports2005.fillna(0)
sports2005 # 20년 5월 스포츠, 레저


#==========================================================================================

# 19년 2월 / 식품(음식) 송장건수
meal1902 = mul.loc[mul['DL_YMD'].apply(lambda x : 190201 <= x <=  190228)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
meal1902 = meal1902.loc[meal1902['DL_GD_LCLS_CD'].apply(lambda x : x  == 17)][['DL_YMD','INVC_CONT']]
meal1902 = meal1902.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
meal1902 = meal1902.reset_index()
del meal1902['index']

PN = food_2019_02['vector'] / food_2019_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))


vec = pd.DataFrame(vec)

meal1902 = pd.concat([meal1902, vec], ignore_index=True, axis = 1)
meal1902 = meal1902.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
meal1902 = meal1902.fillna(0)
meal1902 # 19년 2월 식품

#==========================================================================================

# 19년 3월 / 식품(음식) 송장건수
meal1903 = mul.loc[mul['DL_YMD'].apply(lambda x : 190301 <= x <=  190331)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
meal1903 = meal1903.loc[meal1903['DL_GD_LCLS_CD'].apply(lambda x : x  == 17)][['DL_YMD','INVC_CONT']]
meal1903 = meal1903.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
meal1903 = meal1903.reset_index()
del meal1903['index']

PN = food_2019_03['vector'] / food_2019_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))


vec = pd.DataFrame(vec)

meal1903 = pd.concat([meal1903, vec], ignore_index=True, axis = 1)
meal1903 = meal1903.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
meal1903 = meal1903.fillna(0)
meal1903 # 19년 3월 식품

#==========================================================================================

# 19년 4월 / 식품(음식) 송장건수
meal1904 = mul.loc[mul['DL_YMD'].apply(lambda x : 190401 <= x <=  190430)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
meal1904 = meal1904.loc[meal1904['DL_GD_LCLS_CD'].apply(lambda x : x  == 17)][['DL_YMD','INVC_CONT']]
meal1904 = meal1904.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
meal1904 = meal1904.reset_index()
del meal1904['index']

PN = food_2019_04['vector'] / food_2019_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))

vec = pd.DataFrame(vec)

meal1904 = pd.concat([meal1904, vec], ignore_index=True, axis = 1)
meal1904 = meal1904.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
meal1904 = meal1904.fillna(0)
meal1904 # 19년 4월 식품

#==========================================================================================

# 19년 5월 / 식품(음식) 송장건수
meal1905 = mul.loc[mul['DL_YMD'].apply(lambda x : 190501 <= x <=  190531)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
meal1905 = meal1905.loc[meal1905['DL_GD_LCLS_CD'].apply(lambda x : x  == 17)][['DL_YMD','INVC_CONT']]
meal1905 = meal1905.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
meal1905 = meal1905.reset_index()
del meal1905['index']

PN = food_2019_05['vector'] / food_2019_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('+{}'.format(PN[8]))

vec = pd.DataFrame(vec)

meal1905 = pd.concat([meal1905, vec], ignore_index=True, axis = 1)
meal1905 = meal1905.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
meal1905 = meal1905.fillna(0)
meal1905 # 19년 5월 식품

#==========================================================================================

# 20년 2월 / 식품(음식) 송장건수
meal2002 = mul.loc[mul['DL_YMD'].apply(lambda x : 200201 <= x <=  200228)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
meal2002 = meal2002.loc[meal2002['DL_GD_LCLS_CD'].apply(lambda x : x  == 17)][['DL_YMD','INVC_CONT']]
meal2002 = meal2002.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
meal2002 = meal2002.reset_index()
del meal2002['index']

PN = food_2020_02['vector'] / food_2020_02['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('+{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('+{}'.format(PN[8]))
    elif i == PN[9]:
        vec.append('+{}'.format(PN[9]))

vec = pd.DataFrame(vec)

meal2002 = pd.concat([meal2002, vec], ignore_index=True, axis = 1)
meal2002 = meal2002.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
meal2002 = meal2002.fillna(0)
meal2002 # 20년 2월 식품

#==========================================================================================

# 20년 3월 / 식품(음식) 송장건수
meal2003 = mul.loc[mul['DL_YMD'].apply(lambda x : 200301 <= x <=  200331)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
meal2003 = meal2003.loc[meal2003['DL_GD_LCLS_CD'].apply(lambda x : x  == 17)][['DL_YMD','INVC_CONT']]
meal2003 = meal2003.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
meal2003 = meal2003.reset_index()
del meal2003['index']

PN = food_2020_03['vector'] / food_2020_03['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('+{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('-{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('-{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))

vec = pd.DataFrame(vec)

meal2003 = pd.concat([meal2003, vec], ignore_index=True, axis = 1)
meal2003 = meal2003.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
meal2003 = meal2003.fillna(0)
meal2003 # 20년 3월 식품

#==========================================================================================

# 20년 4월 / 식품(음식) 송장건수
meal2004 = mul.loc[mul['DL_YMD'].apply(lambda x : 200401 <= x <=  200430)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
meal2004 = meal2004.loc[meal2004['DL_GD_LCLS_CD'].apply(lambda x : x  == 17)][['DL_YMD','INVC_CONT']]
meal2004 = meal2004.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
meal2004 = meal2004.reset_index()
del meal2004['index']

PN = food_2020_04['vector'] / food_2020_04['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('-{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('+{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('+{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))
    elif i == PN[6]:
        vec.append('-{}'.format(PN[6]))
    elif i == PN[7]:
        vec.append('-{}'.format(PN[7]))
    elif i == PN[8]:
        vec.append('-{}'.format(PN[8]))

vec = pd.DataFrame(vec)

meal2004 = pd.concat([meal2004, vec], ignore_index=True, axis = 1)
meal2004 = meal2004.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
meal2004 = meal2004.fillna(0)
meal2004 # 20년 4월 식품

#==========================================================================================

# 20년 5월 / 식품(음식) 송장건수
meal2005 = mul.loc[mul['DL_YMD'].apply(lambda x : 200501 <= x <=  200531)][['DL_YMD','DL_GD_LCLS_NM','DL_GD_LCLS_CD','INVC_CONT']]
meal2005 = meal2005.loc[meal2005['DL_GD_LCLS_CD'].apply(lambda x : x  == 17)][['DL_YMD','INVC_CONT']]
meal2005 = meal2005.rename(columns = {'DL_YMD' : '일자','INVC_CONT':'송장건수'})
meal2005 = meal2005.reset_index()
del meal2005['index']

PN = food_2020_05['vector'] / food_2020_05['vector'].count()


vec = []
for i in PN:
    if i == PN[0]:
        vec.append('-{}'.format(PN[0]))
    elif i == PN[1]:
        vec.append('+{}'.format(PN[1]))
    elif i == PN[2]:
        vec.append('-{}'.format(PN[2]))
    elif i == PN[3]:
        vec.append('-{}'.format(PN[3]))
    elif i == PN[4]:
        vec.append('+{}'.format(PN[4]))
    elif i == PN[5]:
        vec.append('+{}'.format(PN[5]))

vec = pd.DataFrame(vec)

meal2005 = pd.concat([meal2005, vec], ignore_index=True, axis = 1)
meal2005 = meal2005.rename(columns = {0:'일자', 1:'이용횟수', 2:'이용금액', 3:'PN'})
meal2005 = meal2005.fillna(0)
meal2005 # 20년 5월 식품



#========================================================================================================
#========================================================================================================

# 신용카드 데이터(신한카드)

store10_2_amt1 # 19년 2월 숙박
store10_3_amt1 # 19년 3월 숙박
store10_4_amt # 19년 4월 숙박
store10_5_amt1 # 19년 5월 숙박
store20_2_amt1 # 20년 2월 숙박
store20_3_amt1 # 20년 3월 숙박
store20_4_amt1 # 20년 4월 숙박
store20_5_amt1 # 20년 5월 숙박
store22_19_2_amt # 19년 2월 문화취미
store22_19_3_amt # 19년 3월 문화취미
store22_19_4_amt # 19년 4월 문화취미
store22_19_5_amt # 19년 5월 문화취미
store22_20_2_amt # 20년 2월 문화취미
store22_20_3_amt # 20년 3월 문화취미
store22_20_4_amt # 20년 4월 문화취미
store22_20_5_amt # 20년 5월 문화취미
store80_81_19_2_amt # 19년 2월 푸드
store80_81_19_3_amt # 19년 3월 푸드
store80_81_19_4_amt # 19년 4월 푸드
store80_81_19_5_amt # 19년 5월 푸드
store80_81_20_2_amt # 20년 2월 푸드
store80_81_20_3_amt # 20년 3월 푸드
store80_81_20_4_amt # 20년 4월 푸드
store80_81_20_5_amt # 20년 5월 푸드
store70_19_2_amt # 19년 2월 의료기관
store70_19_3_amt # 19년 3월 의료기관
store70_19_4_amt # 19년 4월 의료기관
store70_19_5_amt # 19년 5월 의료기관
store70_20_2_amt # 20년 2월 의료기관
store70_20_3_amt # 20년 3월 의료기관
store70_20_4_amt # 20년 4월 의료기관
store70_20_5_amt # 20년 5월 의료기관
store71_19_2_amt # 19년 2월 보건위생
store71_19_3_amt # 19년 3월 보건위생
store71_19_4_amt # 19년 4월 보건위생
store71_19_5_amt # 19년 5월 보건위생
store71_20_2_amt # 20년 2월 보건위생
store71_20_3_amt # 20년 3월 보건위생
store71_20_4_amt # 20년 4월 보건위생
store71_20_5_amt # 20년 5월 보건위생
store20_21_19_2_amt # 19년 2월 레저
store20_21_19_3_amt # 19년 3월 레저
store20_21_19_4_amt # 19년 4월 레저
store20_21_19_5_amt # 19년 5월 레저
store20_21_20_2_amt # 20년 2월 레저
store20_21_20_3_amt # 20년 3월 레저
store20_21_20_4_amt # 20년 4월 레저
store20_21_20_5_amt # 20년 5월 레저




#===============================================================================================================
#===============================================================================================================

# 물류 데이터(올리브네트웍스) - 온라인

book1902_amt # 19년 2월 도서음반(문화취미)
book1903_amt # 19년 3월 도서음반(문화취미)
book1904_amt # 19년 4월 도서음반(문화취미)
book1905_amt # 19년 5월 도서음반(문화취미)
book2002_amt # 20년 2월 도서음반(문화취미)
book2003_amt # 20년 3월 도서음반(문화취미)
book2004_amt # 20년 4월 도서음반(문화취미)
book2005_amt # 20년 5월 도서음반(문화취미)
book2005_amt # 20년 5월 도서음반(문화취미)
gagu1902_mul # 19년 2월 가구(숙박)
gagu1903_mul # 19년 3월 가구(숙박)
gagu1904_mul # 19년 4월 가구(숙박)
gagu1905_mul # 19년 5월 가구(숙박)
gagu2002_mul # 20년 2월 가구(숙박)
gagu2003_mul # 20년 3월 가구(숙박)
gagu2004_mul # 20년 4월 가구(숙박)
gagu2005_mul # 20년 5월 가구(숙박)
bo1902 # 19년 2월 생활건강(보건위생)
bo1903 # 19년 3월 생활건강(보건위생)
bo1904 # 19년 4월 생활건강(보건위생)
bo1905 # 19년 5월 생활건강(보건위생)
bo2002 # 20년 2월 생활건강(보건위생)
bo2003 # 20년 3월 생활건강(보건위생)
bo2004 # 20년 4월 생활건강(보건위생)
bo2005 # 20년 5월 생활건강(보건위생)
sports1902 # 19년 2월 스포츠, 레저(레저)
sports1903 # 19년 3월 스포츠, 레저(레저)
sports1904 # 19년 4월 스포츠, 레저(레저)
sports1905 # 19년 5월 스포츠, 레저(레저)
sports2002 # 20년 2월 스포츠, 레저(레저)
sports2003 # 20년 3월 스포츠, 레저(레저)
sports2004 # 20년 4월 스포츠, 레저(레저)
sports2005 # 20년 5월 스포츠, 레저(레저)
meal1902 # 19년 2월 식품(푸드)
meal1903 # 19년 3월 식품(푸드)
meal1904 # 19년 4월 식품(푸드)
meal1905 # 19년 5월 식품(푸드)
meal2002 # 20년 2월 식품(푸드)
meal2003 # 20년 3월 식품(푸드)
meal2004 # 20년 4월 식품(푸드)
meal2005 # 20년 5월 식품(푸드)




